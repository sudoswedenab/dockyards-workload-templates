apiVersion: dockyards.io/v1alpha3
kind: WorkloadTemplate
metadata:
  name: cert-manager
spec:
  source: |
    package template

    import (
      "encoding/base64"
      "encoding/yaml"

      corev1 "k8s.io/api/core/v1"
      dockyardsv1 "bitbucket.org/sudosweden/dockyards-backend/pkg/api/v1alpha3"
      kustomize "sigs.k8s.io/kustomize/api/types"
      kustomizev1 "github.com/fluxcd/kustomize-controller/api/v1"
      sourcev1 "github.com/fluxcd/source-controller/api/v1"
    )

    #Input: {
      email!:        string
      server:        string | *"https://acme-v02.api.letsencrypt.org/directory"
      hostedZoneID!: string
      dnsZones!: [...string]
      accessKeyID!:     string
      secretAccessKey!: string
      releaseManifest:  string | *"https://github.com/cert-manager/cert-manager/releases/download/v1.16.2/cert-manager.yaml"
    }

    #cluster: dockyardsv1.#Cluster

    #workload: dockyardsv1.#Workload
    #workload: spec: input: #Input

    _secret: corev1.#Secret & {
      apiVersion: "v1"
      kind:       "Secret"
      metadata: name: "route53-credentials"
      data: {
        accessKeyID:     '\(base64.Encode(null, #workload.spec.input.accessKeyID))'
        secretAccessKey: '\(base64.Encode(null, #workload.spec.input.secretAccessKey))'
      }
    }

    _clusterIssuer: {
      apiVersion: "cert-manager.io/v1"
      kind:       "ClusterIssuer"
      metadata: name: "letsencrypt"
      spec: acme: {
        email:  #workload.spec.input.email
        server: #workload.spec.input.server
        privateKeySecretRef: name: "letsencrypt-credentials"
        solvers: [
          {
            selector: dnsZones: #workload.spec.input.dnsZones
            dns01: route53: {
              region:       "eu-north-1"
              hostedZoneID: #workload.spec.input.hostedZoneID
              accessKeyIDSecretRef: {
                name: _secret.metadata.name
                key:  "accessKeyID"
              }
              secretAccessKeySecretRef: {
                name: _secret.metadata.name
                key:  "secretAccessKey"
              }
            }
          },
        ]
      }
    }

    _kustomization: kustomize.#Kustomization & {
      patches: [
        {
          patch: """
            - op: test
              path: /spec/template/spec/containers/0/args/2
              value: --leader-election-namespace=kube-system
            - op: replace
              path: /spec/template/spec/containers/0/args/2
              value: --leader-election-namespace=\(#workload.spec.targetNamespace)
            """
          target: {
            kind:          "Deployment"
            labelSelector: "app.kubernetes.io/component=controller"
          }
        },
        {
          patch: """
            - op: test
              path: /spec/template/spec/containers/0/args/1
              value: --leader-election-namespace=kube-system
            - op: replace
              path: /spec/template/spec/containers/0/args/1
              value: --leader-election-namespace=\(#workload.spec.targetNamespace)
            """
          target: {
            kind:          "Deployment"
            labelSelector: "app.kubernetes.io/component=cainjector"
          }
        },
      ]
      resources: [
        #workload.spec.input.releaseManifest,
        "clusterissuer.yaml",
        "secret.yaml",
      ]
    }

    worktree: dockyardsv1.#Worktree & {
      apiVersion: "dockyards.io/v1alpha3"
      kind:       dockyardsv1.#WorktreeKind
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: files: {
        "kustomization.yaml": '\(yaml.Marshal(_kustomization))'
        "clusterissuer.yaml": '\(yaml.Marshal(_clusterIssuer))'
        "secret.yaml":        '\(yaml.Marshal(_secret))'
      }
    }

    kustomization: kustomizev1.#Kustomization & {
      apiVersion: "kustomize.toolkit.fluxcd.io/v1"
      kind:       kustomizev1.#KustomizationKind
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: {
        interval: "15m"
        kubeConfig: secretRef: name: #cluster.metadata.name + "-kubeconfig"
        prune:         true
        retryInterval: "60s"
        sourceRef: {
          kind: sourcev1.#GitRepositoryKind
          name: worktree.metadata.name
        }
        targetNamespace: #workload.spec.targetNamespace
        wait:            true
      }
    }
  type: dockyards.io/cue
