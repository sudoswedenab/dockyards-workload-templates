apiVersion: dockyards.io/v1alpha3
kind: WorkloadTemplate
metadata:
  name: strimzi-kafka
spec:
  source: |
    package template

    import (
      "encoding/yaml"
      "strings"

      corev1 "k8s.io/api/core/v1"
      dockyardsv1 "bitbucket.org/sudosweden/dockyards-backend/pkg/api/v1alpha3"
      helmv2 "github.com/fluxcd/helm-controller/api/v2"
      sourcev1 "github.com/fluxcd/source-controller/api/v1"
      kustomizev1 "github.com/fluxcd/kustomize-controller/api/v1"
      kafkav1 "github.com/RedHatInsights/strimzi-client-go/apis/kafka.strimzi.io/v1beta2"
      monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
    )

    #Odd:             num={1 + 2*(div(num, 2))}
    #StorageType:     "ephemeral" | "persistent-claim"
    #StorageClass:    "cephfs" | "rbd"
    #CpuQuantity:     string & =~"^([0-9]+(\\.[0-9]+)?)(m)?$"
    #MemoryQuantity:  string & =~"^([0-9]+(\\.[0-9]+)?)(Ki|Mi|Gi|Ti|Pi|Ei)?$"
    #StorageQuantity: string & =~"^([0-9]+(\\.[0-9]+)?)(Ki|Mi|Gi|Ti|Pi|Ei|k|M|G|T|P|E)?$"

    #Input: {
      domain: string
      operator: {
        repository: string | *"oci://quay.io/strimzi-helm"
        chart:      string | *"strimzi-kafka-operator"
        version:    string | *"0.45.0"
      }
      cluster: {
        name:                    string | *"strimzi-kafka"
        topicOperatorEnabled:    bool | *true
        userOperatorEnabled:     bool | *true
        cruiseControlEnabled:    bool | *true
        enablePrometheusMetrics: bool | *false
        access: {
          allowExternalMTLS:  bool | *true
          allowInternalPlain: bool | *false
          allowInternalMTLS:  bool | *true
        }
      }
      kafka: {
        offsetsTopicReplicationFactor:        int & >0 | *1
        transactionStateLogReplicationFactor: int & >0 | *1
        transactionStateLogMinIsr:            int & >0 | *1
        defaultReplicationFactor:             int & >0 | *1
        minInsyncReplicas:                    int & >0 | *1
      }
      broker: {
        nodePoolSize: int & >0 | *1
        resources: {
          requests: {
            memory: #MemoryQuantity | *"512Mi"
            cpu:    #CpuQuantity | *"500m"
          }
          limits: {
            memory: #MemoryQuantity | *"1Gi"
            cpu:    #CpuQuantity | *"1000m"
          }
          storage: {
            class:       #StorageClass | *"cephfs"
            type:        #StorageType | *"ephemeral"
            size:        #StorageQuantity | *"100Mi"
            deleteClaim: bool | *false
          }
        }
      }
      controller: {
        nodePoolSize: int & >0 & #Odd | *3
        resources: {
          requests: {
            memory: #MemoryQuantity | *"512Mi"
            cpu:    #CpuQuantity | *"500m"
          }
          limits: {
            memory: #MemoryQuantity | *"1Gi"
            cpu:    #CpuQuantity | *"1000m"
          }
          storage: {
            class:       #StorageClass | *"cephfs"
            type:        #StorageType | *"ephemeral"
            size:        #StorageQuantity | *"100Mi"
            deleteClaim: bool | *false
          }
        }
      }
    }

    #cluster: dockyardsv1.#Cluster

    #workload: dockyardsv1.#Workload
    #workload: spec: input: #Input

    _namespace: corev1.#Namespace & {
      apiVersion: "v1"
      kind:       "Namespace"
      metadata: {
        name: #workload.spec.targetNamespace
        labels: {
          "pod-security.kubernetes.io/enforce":         "privileged"
          "pod-security.kubernetes.io/enforce-version": "latest"
        }
      }
    }

    worktree: dockyardsv1.#Worktree & {
      apiVersion: "dockyards.io/v1alpha3"
      kind:       dockyardsv1.#WorktreeKind
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: files: {
        "namespace.yaml":                 '\(yaml.Marshal(_namespace))'
        "kafka-controller-nodepool.yaml": '\(yaml.Marshal(_kafkaControllerNodePool))'
        "kafka-broker-nodepool.yaml":     '\(yaml.Marshal(_kafkaBrokerNodePool))'
        "kafka-cluster.yaml":             '\(yaml.Marshal(_kafkaCluster))'
        if #workload.spec.input.cluster.enablePrometheusMetrics {
          "kafka-metrics-configmap.yaml":        '\(yaml.Marshal(_kafkaMetricsConfig))'
          "kafka-cluster-operator-monitor.yaml": '\(yaml.Marshal(_clusterOperatorMonitor))'
          "kafka-controller-monitor.yaml":       '\(yaml.Marshal(_controllerMonitor))'
          "kafka-broker-monitor.yaml":           '\(yaml.Marshal(_brokerMonitor))'
        }
      }
    }

    kustomization: kustomizev1.#Kustomization & {
      apiVersion: "kustomize.toolkit.fluxcd.io/v1"
      kind:       kustomizev1.#KustomizationKind
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: {
        interval: "5m"
        kubeConfig: secretRef: name: #cluster.metadata.name + "-kubeconfig"
        prune: true
        sourceRef: {
          kind: sourcev1.#GitRepositoryKind
          name: #workload.metadata.name
        }
      }
    }

    helmRepository: sourcev1.#HelmRepository & {
      apiVersion: "source.toolkit.fluxcd.io/v1"
      kind:       sourcev1.#HelmRepositoryKind
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: {
        url:      #workload.spec.input.operator.repository
        interval: "5m"
        if strings.HasPrefix(#workload.spec.input.operator.repository, "oci://") {
          type: "oci"
        }
      }
    }

    helmRelease: helmv2.#HelmRelease & {
      apiVersion: "helm.toolkit.fluxcd.io/v2"
      kind:       helmv2.#HelmReleaseKind
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: {
        chart: spec: {
          chart:   #workload.spec.input.operator.chart
          version: #workload.spec.input.operator.version
          sourceRef: {
            kind: helmRepository.kind
            name: helmRepository.metadata.name
          }
        }
        install: remediation: retries: -1
        interval: "5m"
        kubeConfig: secretRef: name: #cluster.metadata.name + "-kubeconfig"
        storageNamespace: #workload.spec.targetNamespace
        targetNamespace:  #workload.spec.targetNamespace
      }
    }

    _kafkaControllerNodePool: kafkav1.#KafkaNodePool & {
      apiVersion: "kafka.strimzi.io/v1beta2"
      kind:       "KafkaNodePool"
      metadata: {
        name:      "controller"
        namespace: #workload.spec.targetNamespace
        labels: "strimzi.io/cluster": #workload.spec.input.cluster.name
      }
      spec: {
        replicas: #workload.spec.input.controller.nodePoolSize
        roles: [
          "controller",
        ]
        resources: {
          requests: {
            memory: #workload.spec.input.controller.resources.requests.memory
            cpu:    #workload.spec.input.controller.resources.requests.cpu
          }
          limits: {
            memory: #workload.spec.input.controller.resources.limits.memory
            cpu:    #workload.spec.input.controller.resources.limits.cpu
          }
        }
        storage: {
          type: "jbod"
          volumes: [
            {
              id:            0
              type:          #workload.spec.input.controller.resources.storage.type
              kraftMetadata: "shared"
              if #workload.spec.input.controller.resources.storage.type == "ephemeral" {
                sizeLimit: #workload.spec.input.controller.resources.storage.size
              }
              if #workload.spec.input.controller.resources.storage.type == "persistent-claim" {
                size:        #workload.spec.input.controller.resources.storage.size
                class:       #workload.spec.input.controller.resources.storage.class
                deleteClaim: #workload.spec.input.controller.resources.storage.deleteClaim
              }
            },
          ]
        }
      }
    }

    _kafkaBrokerNodePool: kafkav1.#KafkaNodePool & {
      apiVersion: "kafka.strimzi.io/v1beta2"
      kind:       "KafkaNodePool"
      metadata: {
        name:      "broker"
        namespace: #workload.spec.targetNamespace
        labels: "strimzi.io/cluster": #workload.spec.input.cluster.name
      }
      spec: {
        replicas: #workload.spec.input.broker.nodePoolSize
        roles: [
          "broker",
        ]
        resources: {
          requests: {
            memory: #workload.spec.input.broker.resources.requests.memory
            cpu:    #workload.spec.input.broker.resources.requests.cpu
          }
          limits: {
            memory: #workload.spec.input.broker.resources.limits.memory
            cpu:    #workload.spec.input.broker.resources.limits.cpu
          }
        }
        storage: {
          type: "jbod"
          volumes: [
            {
              id:            0
              type:          #workload.spec.input.broker.resources.storage.type
              kraftMetadata: "shared"
              if #workload.spec.input.broker.resources.storage.type == "ephemeral" {
                sizeLimit: #workload.spec.input.broker.resources.storage.size
              }
              if #workload.spec.input.broker.resources.storage.type == "persistent-claim" {
                size:        #workload.spec.input.broker.resources.storage.size
                class:       #workload.spec.input.broker.resources.storage.class
                deleteClaim: #workload.spec.input.broker.resources.storage.deleteClaim
              }
            },
          ]
        }
      }
    }

    _kafkaCluster: kafkav1.#Kafka & {
      apiVersion: "kafka.strimzi.io/v1beta2"
      kind:       "Kafka"
      metadata: {
        name:      #workload.spec.input.cluster.name
        namespace: #workload.spec.targetNamespace
        annotations:
        {
          "strimzi.io/node-pools": "enabled"
          "strimzi.io/kraft":      "enabled"
        }
      }
      spec: {
        kafka: {
          version:         "3.9.0"
          metadataVersion: "3.9-IV0"
          authorization: type: "simple"
          listeners: [
            if #workload.spec.input.cluster.access.allowInternalPlain {
              name: "plain"
              port: 9092
              type: "internal"
              tls:  false
            },
            if #workload.spec.input.cluster.access.allowInternalMTLS {
              name: "tls"
              port: 9093
              type: "internal"
              tls:  true
              authentication: type: "tls"
            },
            if #workload.spec.input.cluster.access.allowExternalMTLS {
              name: "external"
              port: 9094
              type: "ingress"
              tls:  true
              authentication: type: "tls"
              configuration: {
                class:        "nginx"
                hostTemplate: "broker-{nodeId}." + #workload.spec.targetNamespace + #workload.spec.input.domain
                bootstrap: host: "bootstrap." + #workload.spec.targetNamespace + #workload.spec.input.domain
              }
            },
          ]
          config: {
            "offsets.topic.replication.factor":         #workload.spec.input.kafka.offsetsTopicReplicationFactor
            "transaction.state.log.replication.factor": #workload.spec.input.kafka.transactionStateLogReplicationFactor
            "transaction.state.log.min.isr":            #workload.spec.input.kafka.transactionStateLogMinIsr
            "default.replication.factor":               #workload.spec.input.kafka.defaultReplicationFactor
            "min.insync.replicas":                      #workload.spec.input.kafka.minInsyncReplicas
            if #workload.spec.input.cluster.topicOperatorEnabled {
              "auto.create.topics.enable": false
            }
          }
          if #workload.spec.input.cluster.enablePrometheusMetrics {
            metricsConfig: {
              type: "jmxPrometheusExporter"
              valueFrom: configMapKeyRef: {
                name: #workload.metadata.name + "-metrics"
                key:  "kafka-metrics-config.yaml"
              }
            }
          }
        }
        if #workload.spec.input.broker.nodePoolSize > 1 & #workload.spec.input.cluster.cruiseControlEnabled {
          cruiseControl: {}
        }
        if #workload.spec.input.cluster.topicOperatorEnabled || #workload.spec.input.cluster.userOperatorEnabled {
          entityOperator: {
            if #workload.spec.input.cluster.topicOperatorEnabled {
              topicOperator: {}
            }
            if #workload.spec.input.cluster.userOperatorEnabled {
              userOperator: {}
            }
          }
        }
      }
    }

    _kafkaMetricsConfig: corev1.#ConfigMap & {
      apiVersion: "v1"
      kind:       "ConfigMap"
      metadata: {
        name:      #workload.metadata.name + "-metrics"
        namespace: #workload.spec.targetNamespace
        labels: {
          "strimzi.io/cluster": #workload.spec.input.cluster.name
          app:                  "strimzi"
        }
      }
      data: "kafka-metrics-config.yaml":
        """
          lowercaseOutputName: true
          rules:
          - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
            name: kafka_server_$1_$2
            type: GAUGE
            labels:
              clientId: "$3"
              topic: "$4"
              partition: "$5"
          - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
            name: kafka_server_$1_$2
            type: GAUGE
            labels:
              clientId: "$3"
              broker: "$4:$5"
          - pattern: kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections
            name: kafka_server_$1_connections_tls_info
            type: GAUGE
            labels:
              cipher: "$2"
              protocol: "$3"
              listener: "$4"
              networkProcessor: "$5"
          - pattern: kafka.server<type=(.+), clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
            name: kafka_server_$1_connections_software
            type: GAUGE
            labels:
              clientSoftwareName: "$2"
              clientSoftwareVersion: "$3"
              listener: "$4"
              networkProcessor: "$5"
          - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+-total):"
            name: kafka_server_$1_$4
            type: COUNTER
            labels:
              listener: "$2"
              networkProcessor: "$3"
          - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):"
            name: kafka_server_$1_$4
            type: GAUGE
            labels:
              listener: "$2"
              networkProcessor: "$3"
          - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+-total)
            name: kafka_server_$1_$4
            type: COUNTER
            labels:
              listener: "$2"
              networkProcessor: "$3"
          - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)
            name: kafka_server_$1_$4
            type: GAUGE
            labels:
              listener: "$2"
              networkProcessor: "$3"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*><>MeanRate
            name: kafka_$1_$2_$3_percent
            type: GAUGE
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*><>Value
            name: kafka_$1_$2_$3_percent
            type: GAUGE
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*, (.+)=(.+)><>Value
            name: kafka_$1_$2_$3_percent
            type: GAUGE
            labels:
              "$4": "$5"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*, (.+)=(.+), (.+)=(.+)><>Count
            name: kafka_$1_$2_$3_total
            type: COUNTER
            labels:
              "$4": "$5"
              "$6": "$7"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*, (.+)=(.+)><>Count
            name: kafka_$1_$2_$3_total
            type: COUNTER
            labels:
              "$4": "$5"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*><>Count
            name: kafka_$1_$2_$3_total
            type: COUNTER
          - pattern: kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              "$4": "$5"
              "$6": "$7"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              "$4": "$5"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)><>Value
            name: kafka_$1_$2_$3
            type: GAUGE
          - pattern: kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
            name: kafka_$1_$2_$3_count
            type: COUNTER
            labels:
              "$4": "$5"
              "$6": "$7"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\\d+)thPercentile
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              "$4": "$5"
              "$6": "$7"
              quantile: "0.$8"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
            name: kafka_$1_$2_$3_count
            type: COUNTER
            labels:
              "$4": "$5"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\\d+)thPercentile
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              "$4": "$5"
              quantile: "0.$6"
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)><>Count
            name: kafka_$1_$2_$3_count
            type: COUNTER
          - pattern: kafka.(\\w+)<type=(.+), name=(.+)><>(\\d+)thPercentile
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              quantile: "0.$4"
          - pattern: "kafka.server<type=raft-metrics><>(.+-total|.+-max):"
            name: kafka_server_raftmetrics_$1
            type: COUNTER
          - pattern: "kafka.server<type=raft-metrics><>(current-state): (.+)"
            name: kafka_server_raftmetrics_$1
            value: 1
            type: UNTYPED
            labels:
              $1: "$2"
          - pattern: "kafka.server<type=raft-metrics><>(.+):"
            name: kafka_server_raftmetrics_$1
            type: GAUGE
          - pattern: "kafka.server<type=raft-channel-metrics><>(.+-total|.+-max):"
            name: kafka_server_raftchannelmetrics_$1
            type: COUNTER
          - pattern: "kafka.server<type=raft-channel-metrics><>(.+):"
            name: kafka_server_raftchannelmetrics_$1
            type: GAUGE
          - pattern: "kafka.server<type=broker-metadata-metrics><>(.+):"
            name: kafka_server_brokermetadatametrics_$1
            type: GAUGE
          """
    }

    _clusterOperatorMonitor: monitoringv1.#PodMonitor & {
      apiVersion: "monitoring.coreos.com/v1"
      kind:       "PodMonitor"
      metadata: {
        name:      #workload.spec.input.cluster.name + "-cluster-operator-metrics"
        namespace: #workload.spec.targetNamespace
        labels: app: "strimzi"
      }
      spec: {
        selector: matchLabels: "strimzi.io/kind": "cluster-operator"
        podMetricsEndpoints: [
          {
            path: "/metrics"
            port: "tcp-prometheus"
          },
        ]
      }
    }

    _controllerMonitor: monitoringv1.#PodMonitor & {
      apiVersion: "monitoring.coreos.com/v1"
      kind:       "PodMonitor"
      metadata: {
        name:      #workload.spec.input.cluster.name + "-controller-metrics"
        namespace: #workload.spec.targetNamespace
        labels: app: "strimzi"
      }
      spec: {
        selector: matchLabels: "strimzi.io/controller-role": "true"
        podMetricsEndpoints: [
          {
            path: "/metrics"
            port: "tcp-prometheus"
          },
        ]
      }
    }

    _brokerMonitor: monitoringv1.#PodMonitor & {
      apiVersion: "monitoring.coreos.com/v1"
      kind:       "PodMonitor"
      metadata: {
        name:      #workload.spec.input.cluster.name + "-broker-metrics"
        namespace: #workload.spec.targetNamespace
        labels: app: "strimzi"
      }
      spec: {
        selector: matchLabels: "strimzi.io/broker-role": "true"
        podMetricsEndpoints: [
          {
            path: "/metrics"
            port: "tcp-prometheus"
          },
        ]
      }
    }
  type: dockyards.io/cue
