# Copyright 2025 Sudo Sweden AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: dockyards.io/v1alpha3
kind: WorkloadTemplate
metadata:
  name: grafana
spec:
  source: |
    package template

    import (
      "strings"
      "encoding/yaml"

      helmv2 "github.com/fluxcd/helm-controller/api/v2"
      sourcev1 "github.com/fluxcd/source-controller/api/v1"
      corev1 "k8s.io/api/core/v1"
      dockyardsv1 "bitbucket.org/sudosweden/dockyards-backend/pkg/api/v1alpha3"
      apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
    )

    #Input: {
      chart:         string | *"grafana"
      repository:    string | *"https://grafana.github.io/helm-charts"
      version:       string | *"9.2.9"
      adminUser:     string | *"admin"
      adminPassword: string | *"admin"
      prometheusURL: string | *"http://prometheus-stack-sofia-pro-prometheus.prometheus-stack.svc.cluster.local"
      domain:        string | *"lkj.strimzi-kafka.dockyards-mvqp2.trashcloud.xyz"
    }

    #ingressHost: #workload.spec.input.domain
    #cluster:     dockyardsv1.#Cluster
    #workload:    dockyardsv1.#Workload
    #workload: spec: input: #Input

    helmRepository: sourcev1.#HelmRepository & {
      apiVersion: "source.toolkit.fluxcd.io/v1"
      kind:       "HelmRepository"
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: {
        interval: "5m"
        url:      #workload.spec.input.repository
        if strings.HasPrefix(#workload.spec.input.repository, "oci://") {
          type: "oci"
        }
      }
    }

    _namespace: corev1.#Namespace & {
      apiVersion: "v1"
      kind:       "Namespace"
      metadata: {
        name: #workload.spec.targetNamespace
        labels: {
          "pod-security.kubernetes.io/enforce":         "privileged"
          "pod-security.kubernetes.io/enforce-version": "latest"
        }
      }
    }

    worktree: dockyardsv1.#Worktree & {
      apiVersion: "dockyards.io/v1alpha3"
      kind:       dockyardsv1.#WorktreeKind
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: files: "namespace.yaml": '\(yaml.Marshal(_namespace))'
    }

    _values: apiextensionsv1.#JSON & {
      ingress: {
        enabled:          true
        ingressClassName: "nginx"
        annotations: {
          "kubernetes.io/ingress.class":    "nginx"
          "cert-manager.io/cluster-issuer": "letsencrypt"
        }
        hosts: [#ingressHost]
        path:     "/"
        pathType: "Prefix"
        tls: [{
          hosts: [#ingressHost]
          secretName: "grafana-ingress"
        }]
      }
    }

    helmRelease: helmv2.#HelmRelease & {
      apiVersion: "helm.toolkit.fluxcd.io/v2"
      kind:       helmv2.#HelmReleaseKind
      metadata: {
        name:      #workload.metadata.name
        namespace: #workload.metadata.namespace
      }
      spec: {
        chart: spec: {
          chart:   #workload.spec.input.chart
          version: #workload.spec.input.version
          sourceRef: {
            kind: helmRepository.kind
            name: helmRepository.metadata.name
          }
        }
        install: remediation: retries: -1
        interval: "5m"
        kubeConfig: secretRef: name: #cluster.metadata.name + "-kubeconfig"
        storageNamespace: #workload.spec.targetNamespace
        targetNamespace:  #workload.spec.targetNamespace
        values:           _values
      }
    }
  type: dockyards.io/cue
