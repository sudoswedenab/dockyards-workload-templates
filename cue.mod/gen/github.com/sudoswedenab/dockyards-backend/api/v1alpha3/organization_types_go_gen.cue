// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/sudoswedenab/dockyards-backend/api/v1alpha3

package v1alpha3

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#OrganizationMemberRole: string // #enumOrganizationMemberRole

#enumOrganizationMemberRole:
	#OrganizationMemberRoleSuperUser |
	#OrganizationMemberRoleUser |
	#OrganizationMemberRoleReader

#OrganizationKind:                "Organization"
#OrganizationMemberRoleSuperUser: #OrganizationMemberRole & "SuperUser"
#OrganizationMemberRoleUser:      #OrganizationMemberRole & "User"
#OrganizationMemberRoleReader:    #OrganizationMemberRole & "Reader"

#OrganizationMemberReference: {
	corev1.#TypedLocalObjectReference

	// +kubebuilder:validation:Enum=SuperUser;User;Reader
	role: #OrganizationMemberRole @go(Role)
	uid:  types.#UID              @go(UID)
}

#OrganizationSpec: {
	displayName?: string @go(DisplayName)
	memberRefs: [...#OrganizationMemberReference] @go(MemberRefs,[]OrganizationMemberReference)
	projectRef?:     null | corev1.#TypedObjectReference @go(ProjectRef,*corev1.TypedObjectReference)
	credentialRef?:  null | corev1.#TypedObjectReference @go(CredentialRef,*corev1.TypedObjectReference)
	skipAutoAssign?: bool                                @go(SkipAutoAssign)
	duration?:       null | metav1.#Duration             @go(Duration,*metav1.Duration)
	namespaceRef?:   null | corev1.#LocalObjectReference @go(NamespaceRef,*corev1.LocalObjectReference)
	providerID?:     null | string                       @go(ProviderID,*string)
}

#OrganizationStatus: {
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)
	expirationTimestamp?: null | metav1.#Time @go(ExpirationTimestamp,*metav1.Time)

	// Deprecated: use spec.namespaceRef
	namespaceRef?:   null | corev1.#LocalObjectReference @go(NamespaceRef,*corev1.LocalObjectReference)
	resourceQuotas?: corev1.#ResourceList                @go(ResourceQuotas)
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type=string,JSONPath=".status.conditions[?(@.type==\"Ready\")].status"
// +kubebuilder:printcolumn:name="Reason",type=string,JSONPath=".status.conditions[?(@.type==\"Ready\")].reason"
// +kubebuilder:printcolumn:name="NamespaceReference",type=string,priority=1,JSONPath=".spec.namespaceRef.name"
// +kubebuilder:printcolumn:name="Age",type=date,JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="Duration",type=string,priority=1,JSONPath=".spec.duration"
#Organization: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec:      #OrganizationSpec   @go(Spec)
	status?:   #OrganizationStatus @go(Status)
}

// +kubebuilder:object:root=true
#OrganizationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Organization] @go(Items,[]Organization)
}
