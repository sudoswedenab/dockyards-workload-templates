// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/RedHatInsights/strimzi-client-go/apis/kafka.strimzi.io/v1beta2

package v1beta2

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// KafkaUser
#KafkaUser: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// The specification of the user.
	spec?: null | #KafkaUserSpec @go(Spec,*KafkaUserSpec)

	// The status of the Kafka User.
	status?: null | #KafkaUserStatus @go(Status,*KafkaUserStatus)
}

// +kubebuilder:object:root=true
// KafkaUserList contains a list of instances.
#KafkaUserList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// A list of KafkaUser objects.
	items?: [...#KafkaUser] @go(Items,[]KafkaUser)
}

// The specification of the user.
#KafkaUserSpec: {
	// Authentication mechanism enabled for this Kafka user. The supported
	// authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
	//
	// * `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
	// * `tls` generates a secret with user certificate for mutual TLS authentication.
	// * `tls-external` does not generate a user certificate.   But prepares the user
	// for using mutual TLS authentication using a user certificate generated outside
	// the User Operator.
	//   ACLs and quotas set for this user are configured in the `CN=<username>`
	// format.
	//
	// Authentication is optional. If authentication is not configured, no credentials
	// are generated. ACLs and quotas set for the user are configured in the
	// `<username>` format suitable for SASL authentication.
	authentication?: null | #KafkaUserSpecAuthentication @go(Authentication,*KafkaUserSpecAuthentication)

	// Authorization rules for this Kafka user.
	authorization?: null | #KafkaUserSpecAuthorization @go(Authorization,*KafkaUserSpecAuthorization)

	// Quotas on requests to control the broker resources used by clients. Network
	// bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka
	// User quotas can be found at
	// http://kafka.apache.org/documentation/#design_quotas.
	quotas?: null | #KafkaUserSpecQuotas @go(Quotas,*KafkaUserSpecQuotas)

	// Template to specify how Kafka User `Secrets` are generated.
	template?: null | #KafkaUserSpecTemplate @go(Template,*KafkaUserSpecTemplate)
}

// Authentication mechanism enabled for this Kafka user. The supported
// authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
// * `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
// * `tls` generates a secret with user certificate for mutual TLS authentication.
// * `tls-external` does not generate a user certificate.   But prepares the user
// for using mutual TLS authentication using a user certificate generated outside
// the User Operator.
//
//	ACLs and quotas set for this user are configured in the `CN=<username>`
//
// format.
//
// Authentication is optional. If authentication is not configured, no credentials
// are generated. ACLs and quotas set for the user are configured in the
// `<username>` format suitable for SASL authentication.
#KafkaUserSpecAuthentication: _

// Specify the password for the user. If not set, a new password is generated by
// the User Operator.
#KafkaUserSpecAuthenticationPassword: _

// Secret from which the password should be read.
#KafkaUserSpecAuthenticationPasswordValueFrom: {
	// Selects a key of a Secret in the resource's namespace.
	secretKeyRef?: null | #KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef @go(SecretKeyRef,*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)
}

// Selects a key of a Secret in the resource's namespace.
#KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

#KafkaUserSpecAuthenticationType: _ // #enumKafkaUserSpecAuthenticationType

#enumKafkaUserSpecAuthenticationType:
	#KafkaUserSpecAuthenticationTypeScramSha512 |
	#KafkaUserSpecAuthenticationTypeTls |
	#KafkaUserSpecAuthenticationTypeTlsExternal

#KafkaUserSpecAuthenticationTypeScramSha512: #KafkaUserSpecAuthenticationType & "scram-sha-512"

#KafkaUserSpecAuthenticationTypeTls: #KafkaUserSpecAuthenticationType & "tls"

#KafkaUserSpecAuthenticationTypeTlsExternal: #KafkaUserSpecAuthenticationType & "tls-external"

// Authorization rules for this Kafka user.
#KafkaUserSpecAuthorization: _

#KafkaUserSpecAuthorizationAclsElem: _

#KafkaUserSpecAuthorizationAclsElemOperation: _ // #enumKafkaUserSpecAuthorizationAclsElemOperation

#enumKafkaUserSpecAuthorizationAclsElemOperation:
	#KafkaUserSpecAuthorizationAclsElemOperationAll |
	#KafkaUserSpecAuthorizationAclsElemOperationAlter |
	#KafkaUserSpecAuthorizationAclsElemOperationAlterConfigs |
	#KafkaUserSpecAuthorizationAclsElemOperationClusterAction |
	#KafkaUserSpecAuthorizationAclsElemOperationCreate |
	#KafkaUserSpecAuthorizationAclsElemOperationDelete |
	#KafkaUserSpecAuthorizationAclsElemOperationDescribe |
	#KafkaUserSpecAuthorizationAclsElemOperationDescribeConfigs |
	#KafkaUserSpecAuthorizationAclsElemOperationIdempotentWrite |
	#KafkaUserSpecAuthorizationAclsElemOperationRead |
	#KafkaUserSpecAuthorizationAclsElemOperationWrite

#KafkaUserSpecAuthorizationAclsElemOperationAll: #KafkaUserSpecAuthorizationAclsElemOperation & "All"

#KafkaUserSpecAuthorizationAclsElemOperationAlter: #KafkaUserSpecAuthorizationAclsElemOperation & "Alter"

#KafkaUserSpecAuthorizationAclsElemOperationAlterConfigs: #KafkaUserSpecAuthorizationAclsElemOperation & "AlterConfigs"

#KafkaUserSpecAuthorizationAclsElemOperationClusterAction: #KafkaUserSpecAuthorizationAclsElemOperation & "ClusterAction"

#KafkaUserSpecAuthorizationAclsElemOperationCreate: #KafkaUserSpecAuthorizationAclsElemOperation & "Create"

#KafkaUserSpecAuthorizationAclsElemOperationDelete: #KafkaUserSpecAuthorizationAclsElemOperation & "Delete"

#KafkaUserSpecAuthorizationAclsElemOperationDescribe: #KafkaUserSpecAuthorizationAclsElemOperation & "Describe"

#KafkaUserSpecAuthorizationAclsElemOperationDescribeConfigs: #KafkaUserSpecAuthorizationAclsElemOperation & "DescribeConfigs"

#KafkaUserSpecAuthorizationAclsElemOperationIdempotentWrite: #KafkaUserSpecAuthorizationAclsElemOperation & "IdempotentWrite"

#KafkaUserSpecAuthorizationAclsElemOperationRead: #KafkaUserSpecAuthorizationAclsElemOperation & "Read"

#KafkaUserSpecAuthorizationAclsElemOperationWrite: #KafkaUserSpecAuthorizationAclsElemOperation & "Write"

#KafkaUserSpecAuthorizationAclsElemOperationsElem: _ // #enumKafkaUserSpecAuthorizationAclsElemOperationsElem

#enumKafkaUserSpecAuthorizationAclsElemOperationsElem:
	#KafkaUserSpecAuthorizationAclsElemOperationsElemAll |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemAlter |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemAlterConfigs |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemClusterAction |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemCreate |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemDelete |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemDescribe |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemDescribeConfigs |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemIdempotentWrite |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemRead |
	#KafkaUserSpecAuthorizationAclsElemOperationsElemWrite

#KafkaUserSpecAuthorizationAclsElemOperationsElemAll: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "All"

#KafkaUserSpecAuthorizationAclsElemOperationsElemAlter: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "Alter"

#KafkaUserSpecAuthorizationAclsElemOperationsElemAlterConfigs: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "AlterConfigs"

#KafkaUserSpecAuthorizationAclsElemOperationsElemClusterAction: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "ClusterAction"

#KafkaUserSpecAuthorizationAclsElemOperationsElemCreate: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "Create"

#KafkaUserSpecAuthorizationAclsElemOperationsElemDelete: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "Delete"

#KafkaUserSpecAuthorizationAclsElemOperationsElemDescribe: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "Describe"

#KafkaUserSpecAuthorizationAclsElemOperationsElemDescribeConfigs: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "DescribeConfigs"

#KafkaUserSpecAuthorizationAclsElemOperationsElemIdempotentWrite: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "IdempotentWrite"

#KafkaUserSpecAuthorizationAclsElemOperationsElemRead: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "Read"

#KafkaUserSpecAuthorizationAclsElemOperationsElemWrite: #KafkaUserSpecAuthorizationAclsElemOperationsElem & "Write"

// Indicates the resource for which given ACL rule applies.
#KafkaUserSpecAuthorizationAclsElemResource: _

#KafkaUserSpecAuthorizationAclsElemResourcePatternType: _ // #enumKafkaUserSpecAuthorizationAclsElemResourcePatternType

#enumKafkaUserSpecAuthorizationAclsElemResourcePatternType:
	#KafkaUserSpecAuthorizationAclsElemResourcePatternTypeLiteral |
	#KafkaUserSpecAuthorizationAclsElemResourcePatternTypePrefix

#KafkaUserSpecAuthorizationAclsElemResourcePatternTypeLiteral: #KafkaUserSpecAuthorizationAclsElemResourcePatternType & "literal"

#KafkaUserSpecAuthorizationAclsElemResourcePatternTypePrefix: #KafkaUserSpecAuthorizationAclsElemResourcePatternType & "prefix"

#KafkaUserSpecAuthorizationAclsElemResourceType: _ // #enumKafkaUserSpecAuthorizationAclsElemResourceType

#enumKafkaUserSpecAuthorizationAclsElemResourceType:
	#KafkaUserSpecAuthorizationAclsElemResourceTypeCluster |
	#KafkaUserSpecAuthorizationAclsElemResourceTypeGroup |
	#KafkaUserSpecAuthorizationAclsElemResourceTypeTopic |
	#KafkaUserSpecAuthorizationAclsElemResourceTypeTransactionalId

#KafkaUserSpecAuthorizationAclsElemResourceTypeCluster: #KafkaUserSpecAuthorizationAclsElemResourceType & "cluster"

#KafkaUserSpecAuthorizationAclsElemResourceTypeGroup: #KafkaUserSpecAuthorizationAclsElemResourceType & "group"

#KafkaUserSpecAuthorizationAclsElemResourceTypeTopic: #KafkaUserSpecAuthorizationAclsElemResourceType & "topic"

#KafkaUserSpecAuthorizationAclsElemResourceTypeTransactionalId: #KafkaUserSpecAuthorizationAclsElemResourceType & "transactionalId"

#KafkaUserSpecAuthorizationAclsElemType: _ // #enumKafkaUserSpecAuthorizationAclsElemType

#enumKafkaUserSpecAuthorizationAclsElemType:
	#KafkaUserSpecAuthorizationAclsElemTypeAllow |
	#KafkaUserSpecAuthorizationAclsElemTypeDeny

#KafkaUserSpecAuthorizationAclsElemTypeAllow: #KafkaUserSpecAuthorizationAclsElemType & "allow"

#KafkaUserSpecAuthorizationAclsElemTypeDeny: #KafkaUserSpecAuthorizationAclsElemType & "deny"

#KafkaUserSpecAuthorizationType: _ // #enumKafkaUserSpecAuthorizationType

#enumKafkaUserSpecAuthorizationType:
	#KafkaUserSpecAuthorizationTypeSimple

#KafkaUserSpecAuthorizationTypeSimple: #KafkaUserSpecAuthorizationType & "simple"

// Quotas on requests to control the broker resources used by clients. Network
// bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka
// User quotas can be found at
// http://kafka.apache.org/documentation/#design_quotas.
#KafkaUserSpecQuotas: {
	// A quota on the maximum bytes per-second that each client group can fetch from a
	// broker before the clients in the group are throttled. Defined on a per-broker
	// basis.
	consumerByteRate?: null | int32 @go(ConsumerByteRate,*int32)

	// A quota on the rate at which mutations are accepted for the create topics
	// request, the create partitions request and the delete topics request. The rate
	// is accumulated by the number of partitions created or deleted.
	controllerMutationRate?: null | float64 @go(ControllerMutationRate,*float64)

	// A quota on the maximum bytes per-second that each client group can publish to a
	// broker before the clients in the group are throttled. Defined on a per-broker
	// basis.
	producerByteRate?: null | int32 @go(ProducerByteRate,*int32)

	// A quota on the maximum CPU utilization of each client group as a percentage of
	// network and I/O threads.
	requestPercentage?: null | int32 @go(RequestPercentage,*int32)
}

// Template to specify how Kafka User `Secrets` are generated.
#KafkaUserSpecTemplate: {
	// Template for KafkaUser resources. The template allows users to specify how the
	// `Secret` with password or TLS certificates is generated.
	secret?: null | #KafkaUserSpecTemplateSecret @go(Secret,*KafkaUserSpecTemplateSecret)
}

// Template for KafkaUser resources. The template allows users to specify how the
// `Secret` with password or TLS certificates is generated.
#KafkaUserSpecTemplateSecret: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaUserSpecTemplateSecretMetadata @go(Metadata,*KafkaUserSpecTemplateSecretMetadata)
}

// Metadata applied to the resource.
#KafkaUserSpecTemplateSecretMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaUserSpecTemplateSecretMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaUserSpecTemplateSecretMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaUserSpecTemplateSecretMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaUserSpecTemplateSecretMetadataLabels: {[string]: string}

// The status of the Kafka User.
#KafkaUserStatus: {
	// List of status conditions.
	conditions?: [...#KafkaUserStatusConditionsElem] @go(Conditions,[]KafkaUserStatusConditionsElem)

	// The generation of the CRD that was last reconciled by the operator.
	observedGeneration?: null | int32 @go(ObservedGeneration,*int32)

	// The name of `Secret` where the credentials are stored.
	secret?: null | string @go(Secret,*string)

	// Username.
	username?: null | string @go(Username,*string)
}

#KafkaUserStatusConditionsElem: {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	lastTransitionTime?: null | string @go(LastTransitionTime,*string)

	// Human-readable message indicating details about the condition's last
	// transition.
	message?: null | string @go(Message,*string)

	// The reason for the condition's last transition (a single word in CamelCase).
	reason?: null | string @go(Reason,*string)

	// The status of the condition, either True, False or Unknown.
	status?: null | string @go(Status,*string)

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	type?: null | string @go(Type,*string)
}
