// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/RedHatInsights/strimzi-client-go/apis/kafka.strimzi.io/v1beta2

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// KafkaMirrorMaker
#KafkaMirrorMaker: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// The specification of Kafka MirrorMaker.
	spec?: null | #KafkaMirrorMakerSpec @go(Spec,*KafkaMirrorMakerSpec)

	// The status of Kafka MirrorMaker.
	status?: null | #KafkaMirrorMakerStatus @go(Status,*KafkaMirrorMakerStatus)
}

// +kubebuilder:object:root=true
// KafkaMirrorMakerList contains a list of instances.
#KafkaMirrorMakerList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// A list of KafkaMirrorMaker objects.
	items?: [...#KafkaMirrorMaker] @go(Items,[]KafkaMirrorMaker)
}

// The specification of Kafka MirrorMaker.
#KafkaMirrorMakerSpec: _

// Configuration of source cluster.
#KafkaMirrorMakerSpecConsumer: _

// Authentication configuration for connecting to the cluster.
#KafkaMirrorMakerSpecConsumerAuthentication: _

// Link to Kubernetes Secret containing the access token which was obtained from
// the authorization server.
#KafkaMirrorMakerSpecConsumerAuthenticationAccessToken: _

// Reference to the `Secret` which holds the certificate and private key pair.
#KafkaMirrorMakerSpecConsumerAuthenticationCertificateAndKey: _

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
// client can use to authenticate against the OAuth server and use the token
// endpoint URI.
#KafkaMirrorMakerSpecConsumerAuthenticationClientSecret: _

// Reference to the `Secret` which holds the password.
#KafkaMirrorMakerSpecConsumerAuthenticationPasswordSecret: _

// Link to Kubernetes Secret containing the refresh token which can be used to
// obtain access token from the authorization server.
#KafkaMirrorMakerSpecConsumerAuthenticationRefreshToken: _

#KafkaMirrorMakerSpecConsumerAuthenticationTlsTrustedCertificatesElem: _

#KafkaMirrorMakerSpecConsumerAuthenticationType: _ // #enumKafkaMirrorMakerSpecConsumerAuthenticationType

#enumKafkaMirrorMakerSpecConsumerAuthenticationType:
	#KafkaMirrorMakerSpecConsumerAuthenticationTypeOauth |
	#KafkaMirrorMakerSpecConsumerAuthenticationTypePlain |
	#KafkaMirrorMakerSpecConsumerAuthenticationTypeScramSha256 |
	#KafkaMirrorMakerSpecConsumerAuthenticationTypeScramSha512 |
	#KafkaMirrorMakerSpecConsumerAuthenticationTypeTls

#KafkaMirrorMakerSpecConsumerAuthenticationTypeOauth: #KafkaMirrorMakerSpecConsumerAuthenticationType & "oauth"

#KafkaMirrorMakerSpecConsumerAuthenticationTypePlain: #KafkaMirrorMakerSpecConsumerAuthenticationType & "plain"

#KafkaMirrorMakerSpecConsumerAuthenticationTypeScramSha256: #KafkaMirrorMakerSpecConsumerAuthenticationType & "scram-sha-256"

#KafkaMirrorMakerSpecConsumerAuthenticationTypeScramSha512: #KafkaMirrorMakerSpecConsumerAuthenticationType & "scram-sha-512"

#KafkaMirrorMakerSpecConsumerAuthenticationTypeTls: #KafkaMirrorMakerSpecConsumerAuthenticationType & "tls"

// TLS configuration for connecting MirrorMaker to the cluster.
#KafkaMirrorMakerSpecConsumerTls: {
	// Trusted certificates for TLS connection.
	trustedCertificates?: [...#KafkaMirrorMakerSpecConsumerTlsTrustedCertificatesElem] @go(TrustedCertificates,[]KafkaMirrorMakerSpecConsumerTlsTrustedCertificatesElem)
}

#KafkaMirrorMakerSpecConsumerTlsTrustedCertificatesElem: _

// JVM Options for pods.
#KafkaMirrorMakerSpecJvmOptions: {
	// A map of -XX options to the JVM.
	"-XX"?: #KafkaMirrorMakerSpecJvmOptionsXX @go(XX)

	// -Xms option to to the JVM.
	"-Xms"?: null | string @go(Xms,*string)

	// -Xmx option to to the JVM.
	"-Xmx"?: null | string @go(Xmx,*string)

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	gcLoggingEnabled?: null | bool @go(GcLoggingEnabled,*bool)

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	javaSystemProperties?: [...#KafkaMirrorMakerSpecJvmOptionsJavaSystemPropertiesElem] @go(JavaSystemProperties,[]KafkaMirrorMakerSpecJvmOptionsJavaSystemPropertiesElem)
}

#KafkaMirrorMakerSpecJvmOptionsJavaSystemPropertiesElem: {
	// The system property name.
	name?: null | string @go(Name,*string)

	// The system property value.
	value?: null | string @go(Value,*string)
}

// A map of -XX options to the JVM.
#KafkaMirrorMakerSpecJvmOptionsXX: {[string]: string}

// Pod liveness checking.
#KafkaMirrorMakerSpecLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// Logging configuration for MirrorMaker.
#KafkaMirrorMakerSpecLogging: _

// A Map from logger name to logger level.
#KafkaMirrorMakerSpecLoggingLoggers: {[string]: string}

#KafkaMirrorMakerSpecLoggingType: _ // #enumKafkaMirrorMakerSpecLoggingType

#enumKafkaMirrorMakerSpecLoggingType:
	#KafkaMirrorMakerSpecLoggingTypeExternal |
	#KafkaMirrorMakerSpecLoggingTypeInline

#KafkaMirrorMakerSpecLoggingTypeExternal: #KafkaMirrorMakerSpecLoggingType & "external"

#KafkaMirrorMakerSpecLoggingTypeInline: #KafkaMirrorMakerSpecLoggingType & "inline"

// `ConfigMap` entry where the logging configuration is stored.
#KafkaMirrorMakerSpecLoggingValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaMirrorMakerSpecLoggingValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaMirrorMakerSpecLoggingValueFromConfigMapKeyRef)
}

// Reference to the key in the ConfigMap containing the configuration.
#KafkaMirrorMakerSpecLoggingValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// Metrics configuration.
#KafkaMirrorMakerSpecMetricsConfig: _

#KafkaMirrorMakerSpecMetricsConfigType: _ // #enumKafkaMirrorMakerSpecMetricsConfigType

#enumKafkaMirrorMakerSpecMetricsConfigType:
	#KafkaMirrorMakerSpecMetricsConfigTypeJmxPrometheusExporter

#KafkaMirrorMakerSpecMetricsConfigTypeJmxPrometheusExporter: #KafkaMirrorMakerSpecMetricsConfigType & "jmxPrometheusExporter"

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
#KafkaMirrorMakerSpecMetricsConfigValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaMirrorMakerSpecMetricsConfigValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaMirrorMakerSpecMetricsConfigValueFromConfigMapKeyRef)
}

// Reference to the key in the ConfigMap containing the configuration.
#KafkaMirrorMakerSpecMetricsConfigValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// Configuration of target cluster.
#KafkaMirrorMakerSpecProducer: _

// Authentication configuration for connecting to the cluster.
#KafkaMirrorMakerSpecProducerAuthentication: _

// Link to Kubernetes Secret containing the access token which was obtained from
// the authorization server.
#KafkaMirrorMakerSpecProducerAuthenticationAccessToken: _

// Reference to the `Secret` which holds the certificate and private key pair.
#KafkaMirrorMakerSpecProducerAuthenticationCertificateAndKey: _

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
// client can use to authenticate against the OAuth server and use the token
// endpoint URI.
#KafkaMirrorMakerSpecProducerAuthenticationClientSecret: _

// Reference to the `Secret` which holds the password.
#KafkaMirrorMakerSpecProducerAuthenticationPasswordSecret: _

// Link to Kubernetes Secret containing the refresh token which can be used to
// obtain access token from the authorization server.
#KafkaMirrorMakerSpecProducerAuthenticationRefreshToken: _

#KafkaMirrorMakerSpecProducerAuthenticationTlsTrustedCertificatesElem: _

#KafkaMirrorMakerSpecProducerAuthenticationType: _ // #enumKafkaMirrorMakerSpecProducerAuthenticationType

#enumKafkaMirrorMakerSpecProducerAuthenticationType:
	#KafkaMirrorMakerSpecProducerAuthenticationTypeOauth |
	#KafkaMirrorMakerSpecProducerAuthenticationTypePlain |
	#KafkaMirrorMakerSpecProducerAuthenticationTypeScramSha256 |
	#KafkaMirrorMakerSpecProducerAuthenticationTypeScramSha512 |
	#KafkaMirrorMakerSpecProducerAuthenticationTypeTls

#KafkaMirrorMakerSpecProducerAuthenticationTypeOauth: #KafkaMirrorMakerSpecProducerAuthenticationType & "oauth"

#KafkaMirrorMakerSpecProducerAuthenticationTypePlain: #KafkaMirrorMakerSpecProducerAuthenticationType & "plain"

#KafkaMirrorMakerSpecProducerAuthenticationTypeScramSha256: #KafkaMirrorMakerSpecProducerAuthenticationType & "scram-sha-256"

#KafkaMirrorMakerSpecProducerAuthenticationTypeScramSha512: #KafkaMirrorMakerSpecProducerAuthenticationType & "scram-sha-512"

#KafkaMirrorMakerSpecProducerAuthenticationTypeTls: #KafkaMirrorMakerSpecProducerAuthenticationType & "tls"

// TLS configuration for connecting MirrorMaker to the cluster.
#KafkaMirrorMakerSpecProducerTls: {
	// Trusted certificates for TLS connection.
	trustedCertificates?: [...#KafkaMirrorMakerSpecProducerTlsTrustedCertificatesElem] @go(TrustedCertificates,[]KafkaMirrorMakerSpecProducerTlsTrustedCertificatesElem)
}

#KafkaMirrorMakerSpecProducerTlsTrustedCertificatesElem: _

// Pod readiness checking.
#KafkaMirrorMakerSpecReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// CPU and memory resources to reserve.
#KafkaMirrorMakerSpecResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaMirrorMakerSpecResourcesClaimsElem] @go(Claims,[]KafkaMirrorMakerSpecResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

#KafkaMirrorMakerSpecResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Template to specify how Kafka MirrorMaker resources, `Deployments` and `Pods`,
// are generated.
#KafkaMirrorMakerSpecTemplate: {
	// Template for Kafka MirrorMaker `Deployment`.
	deployment?: null | #KafkaMirrorMakerSpecTemplateDeployment @go(Deployment,*KafkaMirrorMakerSpecTemplateDeployment)

	// Template for Kafka MirrorMaker container.
	mirrorMakerContainer?: null | #KafkaMirrorMakerSpecTemplateMirrorMakerContainer @go(MirrorMakerContainer,*KafkaMirrorMakerSpecTemplateMirrorMakerContainer)

	// Template for Kafka MirrorMaker `Pods`.
	pod?: null | #KafkaMirrorMakerSpecTemplatePod @go(Pod,*KafkaMirrorMakerSpecTemplatePod)

	// Template for Kafka MirrorMaker `PodDisruptionBudget`.
	podDisruptionBudget?: null | #KafkaMirrorMakerSpecTemplatePodDisruptionBudget @go(PodDisruptionBudget,*KafkaMirrorMakerSpecTemplatePodDisruptionBudget)

	// Template for the Kafka MirrorMaker service account.
	serviceAccount?: null | #KafkaMirrorMakerSpecTemplateServiceAccount @go(ServiceAccount,*KafkaMirrorMakerSpecTemplateServiceAccount)
}

// Template for Kafka MirrorMaker `Deployment`.
#KafkaMirrorMakerSpecTemplateDeployment: {
	// Pod replacement strategy for deployment configuration changes. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	deploymentStrategy?: null | #KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategy @go(DeploymentStrategy,*KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaMirrorMakerSpecTemplateDeploymentMetadata @go(Metadata,*KafkaMirrorMakerSpecTemplateDeploymentMetadata)
}

#KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategy: _ // #enumKafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategy

#enumKafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategy:
	#KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategyRecreate |
	#KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategyRollingUpdate

#KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategyRecreate: #KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategy & "Recreate"

#KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategyRollingUpdate: #KafkaMirrorMakerSpecTemplateDeploymentDeploymentStrategy & "RollingUpdate"

// Metadata applied to the resource.
#KafkaMirrorMakerSpecTemplateDeploymentMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaMirrorMakerSpecTemplateDeploymentMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaMirrorMakerSpecTemplateDeploymentMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaMirrorMakerSpecTemplateDeploymentMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaMirrorMakerSpecTemplateDeploymentMetadataLabels: {[string]: string}

// Template for Kafka MirrorMaker container.
#KafkaMirrorMakerSpecTemplateMirrorMakerContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaMirrorMakerSpecTemplateMirrorMakerContainerEnvElem] @go(Env,[]KafkaMirrorMakerSpecTemplateMirrorMakerContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext @go(SecurityContext,*KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext)
}

#KafkaMirrorMakerSpecTemplateMirrorMakerContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// Security context for the container.
#KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextCapabilities @go(Capabilities,*KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextWindowsOptions)
}

#KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaMirrorMakerSpecTemplateMirrorMakerContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for Kafka MirrorMaker `Pods`.
#KafkaMirrorMakerSpecTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaMirrorMakerSpecTemplatePodAffinity @go(Affinity,*KafkaMirrorMakerSpecTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaMirrorMakerSpecTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaMirrorMakerSpecTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaMirrorMakerSpecTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaMirrorMakerSpecTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaMirrorMakerSpecTemplatePodMetadata @go(Metadata,*KafkaMirrorMakerSpecTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaMirrorMakerSpecTemplatePodSecurityContext @go(SecurityContext,*KafkaMirrorMakerSpecTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaMirrorMakerSpecTemplatePodTolerationsElem] @go(Tolerations,[]KafkaMirrorMakerSpecTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElem)
}

// The pod's affinity rules.
#KafkaMirrorMakerSpecTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaMirrorMakerSpecTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinity)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaMirrorMakerSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaMirrorMakerSpecTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaMirrorMakerSpecTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Annotations added to the Kubernetes resource.
#KafkaMirrorMakerSpecTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaMirrorMakerSpecTemplatePodMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaMirrorMakerSpecTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaMirrorMakerSpecTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaMirrorMakerSpecTemplatePodMetadataLabels @go(Labels)
}

#KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaMirrorMakerSpecTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaMirrorMakerSpecTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaMirrorMakerSpecTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Configures pod-level security attributes and common container settings.
#KafkaMirrorMakerSpecTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaMirrorMakerSpecTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaMirrorMakerSpecTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaMirrorMakerSpecTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaMirrorMakerSpecTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaMirrorMakerSpecTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaMirrorMakerSpecTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaMirrorMakerSpecTemplatePodSecurityContextWindowsOptions)
}

#KafkaMirrorMakerSpecTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

#KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaMirrorMakerSpecTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

// Annotations added to the Kubernetes resource.
#KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadataLabels: {[string]: string}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
#KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadataLabels @go(Labels)
}

// Template for Kafka MirrorMaker `PodDisruptionBudget`.
#KafkaMirrorMakerSpecTemplatePodDisruptionBudget: {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	maxUnavailable?: null | int32 @go(MaxUnavailable,*int32)

	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	metadata?: null | #KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadata @go(Metadata,*KafkaMirrorMakerSpecTemplatePodDisruptionBudgetMetadata)
}

// Annotations added to the Kubernetes resource.
#KafkaMirrorMakerSpecTemplateServiceAccountMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaMirrorMakerSpecTemplateServiceAccountMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaMirrorMakerSpecTemplateServiceAccountMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaMirrorMakerSpecTemplateServiceAccountMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaMirrorMakerSpecTemplateServiceAccountMetadataLabels @go(Labels)
}

// Template for the Kafka MirrorMaker service account.
#KafkaMirrorMakerSpecTemplateServiceAccount: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaMirrorMakerSpecTemplateServiceAccountMetadata @go(Metadata,*KafkaMirrorMakerSpecTemplateServiceAccountMetadata)
}

#KafkaMirrorMakerSpecTracingType: _ // #enumKafkaMirrorMakerSpecTracingType

#enumKafkaMirrorMakerSpecTracingType:
	#KafkaMirrorMakerSpecTracingTypeJaeger |
	#KafkaMirrorMakerSpecTracingTypeOpentelemetry

#KafkaMirrorMakerSpecTracingTypeJaeger: #KafkaMirrorMakerSpecTracingType & "jaeger"

#KafkaMirrorMakerSpecTracingTypeOpentelemetry: #KafkaMirrorMakerSpecTracingType & "opentelemetry"

// The configuration of tracing in Kafka MirrorMaker.
#KafkaMirrorMakerSpecTracing: _

#KafkaMirrorMakerStatusConditionsElem: {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	lastTransitionTime?: null | string @go(LastTransitionTime,*string)

	// Human-readable message indicating details about the condition's last
	// transition.
	message?: null | string @go(Message,*string)

	// The reason for the condition's last transition (a single word in CamelCase).
	reason?: null | string @go(Reason,*string)

	// The status of the condition, either True, False or Unknown.
	status?: null | string @go(Status,*string)

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	type?: null | string @go(Type,*string)
}

// The status of Kafka MirrorMaker.
#KafkaMirrorMakerStatus: {
	// List of status conditions.
	conditions?: [...#KafkaMirrorMakerStatusConditionsElem] @go(Conditions,[]KafkaMirrorMakerStatusConditionsElem)

	// Label selector for pods providing this resource.
	labelSelector?: null | string @go(LabelSelector,*string)

	// The generation of the CRD that was last reconciled by the operator.
	observedGeneration?: null | int32 @go(ObservedGeneration,*int32)

	// The current number of pods being used to provide this resource.
	replicas?: null | int32 @go(Replicas,*int32)
}
