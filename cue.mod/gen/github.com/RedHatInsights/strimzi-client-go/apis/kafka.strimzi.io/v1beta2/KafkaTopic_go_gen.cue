// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/RedHatInsights/strimzi-client-go/apis/kafka.strimzi.io/v1beta2

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// KafkaTopic
#KafkaTopic: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// The specification of the topic.
	spec?: null | #KafkaTopicSpec @go(Spec,*KafkaTopicSpec)

	// The status of the topic.
	status?: null | #KafkaTopicStatus @go(Status,*KafkaTopicStatus)
}

// +kubebuilder:object:root=true
// KafkaTopicList contains a list of instances.
#KafkaTopicList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// A list of KafkaTopic objects.
	items?: [...#KafkaTopic] @go(Items,[]KafkaTopic)
}

// The specification of the topic.
#KafkaTopicSpec: {
	// The topic configuration.
	config?: null | apiextensions.#JSON @go(Config,*apiextensions.JSON)

	// The number of partitions the topic should have. This cannot be decreased after
	// topic creation. It can be increased after topic creation, but it is important
	// to understand the consequences that has, especially for topics with semantic
	// partitioning. When absent this will default to the broker configuration for
	// `num.partitions`.
	partitions?: null | int32 @go(Partitions,*int32)

	// The number of replicas the topic should have. When absent this will default to
	// the broker configuration for `default.replication.factor`.
	replicas?: null | int32 @go(Replicas,*int32)

	// The name of the topic. When absent this will default to the metadata.name of
	// the topic. It is recommended to not set this unless the topic name is not a
	// valid Kubernetes resource name.
	topicName?: null | string @go(TopicName,*string)
}

// The status of the topic.
#KafkaTopicStatus: {
	// List of status conditions.
	conditions?: [...#KafkaTopicStatusConditionsElem] @go(Conditions,[]KafkaTopicStatusConditionsElem)

	// The generation of the CRD that was last reconciled by the operator.
	observedGeneration?: null | int32 @go(ObservedGeneration,*int32)

	// The topic's id. For a KafkaTopic with the ready condition, this will change
	// only if the topic gets deleted and recreated with the same name.
	topicId?: null | string @go(TopicId,*string)

	// Topic name.
	topicName?: null | string @go(TopicName,*string)
}

#KafkaTopicStatusConditionsElem: {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	lastTransitionTime?: null | string @go(LastTransitionTime,*string)

	// Human-readable message indicating details about the condition's last
	// transition.
	message?: null | string @go(Message,*string)

	// The reason for the condition's last transition (a single word in CamelCase).
	reason?: null | string @go(Reason,*string)

	// The status of the condition, either True, False or Unknown.
	status?: null | string @go(Status,*string)

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	type?: null | string @go(Type,*string)
}
