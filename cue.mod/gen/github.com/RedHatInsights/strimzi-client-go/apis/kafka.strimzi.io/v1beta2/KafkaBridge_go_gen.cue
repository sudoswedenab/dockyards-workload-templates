// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/RedHatInsights/strimzi-client-go/apis/kafka.strimzi.io/v1beta2

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// KafkaBridge
#KafkaBridge: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// The specification of the Kafka Bridge.
	spec?: null | #KafkaBridgeSpec @go(Spec,*KafkaBridgeSpec)

	// The status of the Kafka Bridge.
	status?: null | #KafkaBridgeStatus @go(Status,*KafkaBridgeStatus)
}

// +kubebuilder:object:root=true
// KafkaBridgeList contains a list of instances.
#KafkaBridgeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// A list of KafkaBridge objects.
	items?: [...#KafkaBridge] @go(Items,[]KafkaBridge)
}

// The specification of the Kafka Bridge.
#KafkaBridgeSpec: _

// Kafka AdminClient related configuration.
#KafkaBridgeSpecAdminClient: {
	// The Kafka AdminClient configuration used for AdminClient instances created by
	// the bridge.
	config?: null | apiextensions.#JSON @go(Config,*apiextensions.JSON)
}

// Authentication configuration for connecting to the cluster.
#KafkaBridgeSpecAuthentication: _

// Link to Kubernetes Secret containing the access token which was obtained from
// the authorization server.
#KafkaBridgeSpecAuthenticationAccessToken: _

// Reference to the `Secret` which holds the certificate and private key pair.
#KafkaBridgeSpecAuthenticationCertificateAndKey: _

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
// client can use to authenticate against the OAuth server and use the token
// endpoint URI.
#KafkaBridgeSpecAuthenticationClientSecret: _

// Reference to the `Secret` which holds the password.
#KafkaBridgeSpecAuthenticationPasswordSecret: _

// Link to Kubernetes Secret containing the refresh token which can be used to
// obtain access token from the authorization server.
#KafkaBridgeSpecAuthenticationRefreshToken: _

#KafkaBridgeSpecAuthenticationTlsTrustedCertificatesElem: _

#KafkaBridgeSpecAuthenticationType: _ // #enumKafkaBridgeSpecAuthenticationType

#enumKafkaBridgeSpecAuthenticationType:
	#KafkaBridgeSpecAuthenticationTypeOauth |
	#KafkaBridgeSpecAuthenticationTypePlain |
	#KafkaBridgeSpecAuthenticationTypeScramSha256 |
	#KafkaBridgeSpecAuthenticationTypeScramSha512 |
	#KafkaBridgeSpecAuthenticationTypeTls

#KafkaBridgeSpecAuthenticationTypeOauth: #KafkaBridgeSpecAuthenticationType & "oauth"

#KafkaBridgeSpecAuthenticationTypePlain: #KafkaBridgeSpecAuthenticationType & "plain"

#KafkaBridgeSpecAuthenticationTypeScramSha256: #KafkaBridgeSpecAuthenticationType & "scram-sha-256"

#KafkaBridgeSpecAuthenticationTypeScramSha512: #KafkaBridgeSpecAuthenticationType & "scram-sha-512"

#KafkaBridgeSpecAuthenticationTypeTls: #KafkaBridgeSpecAuthenticationType & "tls"

// Kafka consumer related configuration.
#KafkaBridgeSpecConsumer: {
	// The Kafka consumer configuration used for consumer instances created by the
	// bridge. Properties with the following prefixes cannot be set: ssl.,
	// bootstrap.servers, group.id, sasl., security. (with the exception of:
	// ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol,
	// ssl.enabled.protocols).
	config?: null | apiextensions.#JSON @go(Config,*apiextensions.JSON)
}

// The HTTP related configuration.
#KafkaBridgeSpecHttp: {
	// CORS configuration for the HTTP Bridge.
	cors?: null | #KafkaBridgeSpecHttpCors @go(Cors,*KafkaBridgeSpecHttpCors)

	// The port which is the server listening on.
	port?: null | int32 @go(Port,*int32)
}

// CORS configuration for the HTTP Bridge.
#KafkaBridgeSpecHttpCors: _

// **Currently not supported** JVM Options for pods.
#KafkaBridgeSpecJvmOptions: {
	// A map of -XX options to the JVM.
	"-XX"?: #KafkaBridgeSpecJvmOptionsXX @go(XX)

	// -Xms option to to the JVM.
	"-Xms"?: null | string @go(Xms,*string)

	// -Xmx option to to the JVM.
	"-Xmx"?: null | string @go(Xmx,*string)

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	gcLoggingEnabled?: null | bool @go(GcLoggingEnabled,*bool)

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	javaSystemProperties?: [...#KafkaBridgeSpecJvmOptionsJavaSystemPropertiesElem] @go(JavaSystemProperties,[]KafkaBridgeSpecJvmOptionsJavaSystemPropertiesElem)
}

#KafkaBridgeSpecJvmOptionsJavaSystemPropertiesElem: {
	// The system property name.
	name?: null | string @go(Name,*string)

	// The system property value.
	value?: null | string @go(Value,*string)
}

// A map of -XX options to the JVM.
#KafkaBridgeSpecJvmOptionsXX: {[string]: string}

// Pod liveness checking.
#KafkaBridgeSpecLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// Logging configuration for Kafka Bridge.
#KafkaBridgeSpecLogging: _

// A Map from logger name to logger level.
#KafkaBridgeSpecLoggingLoggers: {[string]: string}

#KafkaBridgeSpecLoggingType: _ // #enumKafkaBridgeSpecLoggingType

#enumKafkaBridgeSpecLoggingType:
	#KafkaBridgeSpecLoggingTypeExternal |
	#KafkaBridgeSpecLoggingTypeInline

#KafkaBridgeSpecLoggingTypeExternal: #KafkaBridgeSpecLoggingType & "external"

#KafkaBridgeSpecLoggingTypeInline: #KafkaBridgeSpecLoggingType & "inline"

// `ConfigMap` entry where the logging configuration is stored.
#KafkaBridgeSpecLoggingValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaBridgeSpecLoggingValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaBridgeSpecLoggingValueFromConfigMapKeyRef)
}

// Reference to the key in the ConfigMap containing the configuration.
#KafkaBridgeSpecLoggingValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// Kafka producer related configuration.
#KafkaBridgeSpecProducer: {
	// The Kafka producer configuration used for producer instances created by the
	// bridge. Properties with the following prefixes cannot be set: ssl.,
	// bootstrap.servers, sasl., security. (with the exception of:
	// ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol,
	// ssl.enabled.protocols).
	config?: null | apiextensions.#JSON @go(Config,*apiextensions.JSON)
}

// Configuration of the node label which will be used as the client.rack consumer
// configuration.
#KafkaBridgeSpecRack: _

// Pod readiness checking.
#KafkaBridgeSpecReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// CPU and memory resources to reserve.
#KafkaBridgeSpecResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaBridgeSpecResourcesClaimsElem] @go(Claims,[]KafkaBridgeSpecResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

#KafkaBridgeSpecResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Template for Kafka Bridge resources. The template allows users to specify how a
// `Deployment` and `Pod` is generated.
#KafkaBridgeSpecTemplate: {
	// Template for Kafka Bridge API `Service`.
	apiService?: null | #KafkaBridgeSpecTemplateApiService @go(ApiService,*KafkaBridgeSpecTemplateApiService)

	// Template for the Kafka Bridge container.
	bridgeContainer?: null | #KafkaBridgeSpecTemplateBridgeContainer @go(BridgeContainer,*KafkaBridgeSpecTemplateBridgeContainer)

	// Template for the Kafka Bridge ClusterRoleBinding.
	clusterRoleBinding?: null | #KafkaBridgeSpecTemplateClusterRoleBinding @go(ClusterRoleBinding,*KafkaBridgeSpecTemplateClusterRoleBinding)

	// Template for Kafka Bridge `Deployment`.
	deployment?: null | #KafkaBridgeSpecTemplateDeployment @go(Deployment,*KafkaBridgeSpecTemplateDeployment)

	// Template for the Kafka Bridge init container.
	initContainer?: null | #KafkaBridgeSpecTemplateInitContainer @go(InitContainer,*KafkaBridgeSpecTemplateInitContainer)

	// Template for Kafka Bridge `Pods`.
	pod?: null | #KafkaBridgeSpecTemplatePod @go(Pod,*KafkaBridgeSpecTemplatePod)

	// Template for Kafka Bridge `PodDisruptionBudget`.
	podDisruptionBudget?: null | #KafkaBridgeSpecTemplatePodDisruptionBudget @go(PodDisruptionBudget,*KafkaBridgeSpecTemplatePodDisruptionBudget)

	// Template for the Kafka Bridge service account.
	serviceAccount?: null | #KafkaBridgeSpecTemplateServiceAccount @go(ServiceAccount,*KafkaBridgeSpecTemplateServiceAccount)
}

// Template for Kafka Bridge API `Service`.
#KafkaBridgeSpecTemplateApiService: {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	ipFamilies?: [...#KafkaBridgeSpecTemplateApiServiceIpFamiliesElem] @go(IpFamilies,[]KafkaBridgeSpecTemplateApiServiceIpFamiliesElem)

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	ipFamilyPolicy?: null | #KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy @go(IpFamilyPolicy,*KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaBridgeSpecTemplateApiServiceMetadata @go(Metadata,*KafkaBridgeSpecTemplateApiServiceMetadata)
}

#KafkaBridgeSpecTemplateApiServiceIpFamiliesElem: _ // #enumKafkaBridgeSpecTemplateApiServiceIpFamiliesElem

#enumKafkaBridgeSpecTemplateApiServiceIpFamiliesElem:
	#KafkaBridgeSpecTemplateApiServiceIpFamiliesElemIPv4 |
	#KafkaBridgeSpecTemplateApiServiceIpFamiliesElemIPv6

#KafkaBridgeSpecTemplateApiServiceIpFamiliesElemIPv4: #KafkaBridgeSpecTemplateApiServiceIpFamiliesElem & "IPv4"

#KafkaBridgeSpecTemplateApiServiceIpFamiliesElemIPv6: #KafkaBridgeSpecTemplateApiServiceIpFamiliesElem & "IPv6"

#KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy: _ // #enumKafkaBridgeSpecTemplateApiServiceIpFamilyPolicy

#enumKafkaBridgeSpecTemplateApiServiceIpFamilyPolicy:
	#KafkaBridgeSpecTemplateApiServiceIpFamilyPolicyPreferDualStack |
	#KafkaBridgeSpecTemplateApiServiceIpFamilyPolicyRequireDualStack |
	#KafkaBridgeSpecTemplateApiServiceIpFamilyPolicySingleStack

#KafkaBridgeSpecTemplateApiServiceIpFamilyPolicyPreferDualStack: #KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy & "PreferDualStack"

#KafkaBridgeSpecTemplateApiServiceIpFamilyPolicyRequireDualStack: #KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy & "RequireDualStack"

#KafkaBridgeSpecTemplateApiServiceIpFamilyPolicySingleStack: #KafkaBridgeSpecTemplateApiServiceIpFamilyPolicy & "SingleStack"

// Metadata applied to the resource.
#KafkaBridgeSpecTemplateApiServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaBridgeSpecTemplateApiServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaBridgeSpecTemplateApiServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaBridgeSpecTemplateApiServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaBridgeSpecTemplateApiServiceMetadataLabels: {[string]: string}

// Template for the Kafka Bridge container.
#KafkaBridgeSpecTemplateBridgeContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaBridgeSpecTemplateBridgeContainerEnvElem] @go(Env,[]KafkaBridgeSpecTemplateBridgeContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaBridgeSpecTemplateBridgeContainerSecurityContext @go(SecurityContext,*KafkaBridgeSpecTemplateBridgeContainerSecurityContext)
}

#KafkaBridgeSpecTemplateBridgeContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// Security context for the container.
#KafkaBridgeSpecTemplateBridgeContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilities @go(Capabilities,*KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptions)
}

#KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for the Kafka Bridge ClusterRoleBinding.
#KafkaBridgeSpecTemplateClusterRoleBinding: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaBridgeSpecTemplateClusterRoleBindingMetadata @go(Metadata,*KafkaBridgeSpecTemplateClusterRoleBindingMetadata)
}

// Metadata applied to the resource.
#KafkaBridgeSpecTemplateClusterRoleBindingMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaBridgeSpecTemplateClusterRoleBindingMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaBridgeSpecTemplateClusterRoleBindingMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaBridgeSpecTemplateClusterRoleBindingMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaBridgeSpecTemplateClusterRoleBindingMetadataLabels: {[string]: string}

// Template for Kafka Bridge `Deployment`.
#KafkaBridgeSpecTemplateDeployment: {
	// Pod replacement strategy for deployment configuration changes. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	deploymentStrategy?: null | #KafkaBridgeSpecTemplateDeploymentDeploymentStrategy @go(DeploymentStrategy,*KafkaBridgeSpecTemplateDeploymentDeploymentStrategy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaBridgeSpecTemplateDeploymentMetadata @go(Metadata,*KafkaBridgeSpecTemplateDeploymentMetadata)
}

#KafkaBridgeSpecTemplateDeploymentDeploymentStrategy: _ // #enumKafkaBridgeSpecTemplateDeploymentDeploymentStrategy

#enumKafkaBridgeSpecTemplateDeploymentDeploymentStrategy:
	#KafkaBridgeSpecTemplateDeploymentDeploymentStrategyRecreate |
	#KafkaBridgeSpecTemplateDeploymentDeploymentStrategyRollingUpdate

#KafkaBridgeSpecTemplateDeploymentDeploymentStrategyRecreate: #KafkaBridgeSpecTemplateDeploymentDeploymentStrategy & "Recreate"

#KafkaBridgeSpecTemplateDeploymentDeploymentStrategyRollingUpdate: #KafkaBridgeSpecTemplateDeploymentDeploymentStrategy & "RollingUpdate"

// Metadata applied to the resource.
#KafkaBridgeSpecTemplateDeploymentMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaBridgeSpecTemplateDeploymentMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaBridgeSpecTemplateDeploymentMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaBridgeSpecTemplateDeploymentMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaBridgeSpecTemplateDeploymentMetadataLabels: {[string]: string}

// Template for the Kafka Bridge init container.
#KafkaBridgeSpecTemplateInitContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaBridgeSpecTemplateInitContainerEnvElem] @go(Env,[]KafkaBridgeSpecTemplateInitContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaBridgeSpecTemplateInitContainerSecurityContext @go(SecurityContext,*KafkaBridgeSpecTemplateInitContainerSecurityContext)
}

#KafkaBridgeSpecTemplateInitContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// Security context for the container.
#KafkaBridgeSpecTemplateInitContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaBridgeSpecTemplateInitContainerSecurityContextCapabilities @go(Capabilities,*KafkaBridgeSpecTemplateInitContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaBridgeSpecTemplateInitContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaBridgeSpecTemplateInitContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaBridgeSpecTemplateInitContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaBridgeSpecTemplateInitContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaBridgeSpecTemplateInitContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaBridgeSpecTemplateInitContainerSecurityContextWindowsOptions)
}

#KafkaBridgeSpecTemplateInitContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaBridgeSpecTemplateInitContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaBridgeSpecTemplateInitContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaBridgeSpecTemplateInitContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for Kafka Bridge `Pods`.
#KafkaBridgeSpecTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaBridgeSpecTemplatePodAffinity @go(Affinity,*KafkaBridgeSpecTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaBridgeSpecTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaBridgeSpecTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaBridgeSpecTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaBridgeSpecTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaBridgeSpecTemplatePodMetadata @go(Metadata,*KafkaBridgeSpecTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaBridgeSpecTemplatePodSecurityContext @go(SecurityContext,*KafkaBridgeSpecTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaBridgeSpecTemplatePodTolerationsElem] @go(Tolerations,[]KafkaBridgeSpecTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElem)
}

// The pod's affinity rules.
#KafkaBridgeSpecTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaBridgeSpecTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaBridgeSpecTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaBridgeSpecTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaBridgeSpecTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaBridgeSpecTemplatePodAffinityPodAntiAffinity)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

// Template for Kafka Bridge `PodDisruptionBudget`.
#KafkaBridgeSpecTemplatePodDisruptionBudget: {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	maxUnavailable?: null | int32 @go(MaxUnavailable,*int32)

	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	metadata?: null | #KafkaBridgeSpecTemplatePodDisruptionBudgetMetadata @go(Metadata,*KafkaBridgeSpecTemplatePodDisruptionBudgetMetadata)
}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
#KafkaBridgeSpecTemplatePodDisruptionBudgetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataLabels: {[string]: string}

#KafkaBridgeSpecTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaBridgeSpecTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Metadata applied to the resource.
#KafkaBridgeSpecTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaBridgeSpecTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaBridgeSpecTemplatePodMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaBridgeSpecTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaBridgeSpecTemplatePodMetadataLabels: {[string]: string}

// Configures pod-level security attributes and common container settings.
#KafkaBridgeSpecTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaBridgeSpecTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaBridgeSpecTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaBridgeSpecTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaBridgeSpecTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaBridgeSpecTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaBridgeSpecTemplatePodSecurityContextWindowsOptions)
}

#KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaBridgeSpecTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaBridgeSpecTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaBridgeSpecTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

#KafkaBridgeSpecTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

#KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaBridgeSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

// Template for the Kafka Bridge service account.
#KafkaBridgeSpecTemplateServiceAccount: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaBridgeSpecTemplateServiceAccountMetadata @go(Metadata,*KafkaBridgeSpecTemplateServiceAccountMetadata)
}

// Metadata applied to the resource.
#KafkaBridgeSpecTemplateServiceAccountMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaBridgeSpecTemplateServiceAccountMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaBridgeSpecTemplateServiceAccountMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaBridgeSpecTemplateServiceAccountMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaBridgeSpecTemplateServiceAccountMetadataLabels: {[string]: string}

// TLS configuration for connecting Kafka Bridge to the cluster.
#KafkaBridgeSpecTls: {
	// Trusted certificates for TLS connection.
	trustedCertificates?: [...#KafkaBridgeSpecTlsTrustedCertificatesElem] @go(TrustedCertificates,[]KafkaBridgeSpecTlsTrustedCertificatesElem)
}

#KafkaBridgeSpecTlsTrustedCertificatesElem: _

#KafkaBridgeSpecTracingType: _ // #enumKafkaBridgeSpecTracingType

#enumKafkaBridgeSpecTracingType:
	#KafkaBridgeSpecTracingTypeJaeger |
	#KafkaBridgeSpecTracingTypeOpentelemetry

#KafkaBridgeSpecTracingTypeJaeger: #KafkaBridgeSpecTracingType & "jaeger"

#KafkaBridgeSpecTracingTypeOpentelemetry: #KafkaBridgeSpecTracingType & "opentelemetry"

// The configuration of tracing in Kafka Bridge.
#KafkaBridgeSpecTracing: _

#KafkaBridgeStatusConditionsElem: {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	lastTransitionTime?: null | string @go(LastTransitionTime,*string)

	// Human-readable message indicating details about the condition's last
	// transition.
	message?: null | string @go(Message,*string)

	// The reason for the condition's last transition (a single word in CamelCase).
	reason?: null | string @go(Reason,*string)

	// The status of the condition, either True, False or Unknown.
	status?: null | string @go(Status,*string)

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	type?: null | string @go(Type,*string)
}

// The status of the Kafka Bridge.
#KafkaBridgeStatus: {
	// List of status conditions.
	conditions?: [...#KafkaBridgeStatusConditionsElem] @go(Conditions,[]KafkaBridgeStatusConditionsElem)

	// Label selector for pods providing this resource.
	labelSelector?: null | string @go(LabelSelector,*string)

	// The generation of the CRD that was last reconciled by the operator.
	observedGeneration?: null | int32 @go(ObservedGeneration,*int32)

	// The current number of pods being used to provide this resource.
	replicas?: null | int32 @go(Replicas,*int32)

	// The URL at which external client applications can access the Kafka Bridge.
	url?: null | string @go(Url,*string)
}
