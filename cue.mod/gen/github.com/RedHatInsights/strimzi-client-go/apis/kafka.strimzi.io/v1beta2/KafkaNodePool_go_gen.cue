// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/RedHatInsights/strimzi-client-go/apis/kafka.strimzi.io/v1beta2

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// KafkaNodePool
#KafkaNodePool: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// The specification of the KafkaNodePool.
	spec?: null | #KafkaNodePoolSpec @go(Spec,*KafkaNodePoolSpec)

	// The status of the KafkaNodePool.
	status?: null | #KafkaNodePoolStatus @go(Status,*KafkaNodePoolStatus)
}

// +kubebuilder:object:root=true
// KafkaNodePoolList contains a list of instances.
#KafkaNodePoolList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// A list of KafkaNodePool objects.
	items?: [...#KafkaNodePool] @go(Items,[]KafkaNodePool)
}

// The specification of the KafkaNodePool.
#KafkaNodePoolSpec: _

// JVM Options for pods.
#KafkaNodePoolSpecJvmOptions: {
	// A map of -XX options to the JVM.
	"-XX"?: #KafkaNodePoolSpecJvmOptionsXX @go(XX)

	// -Xms option to to the JVM.
	"-Xms"?: null | string @go(Xms,*string)

	// -Xmx option to to the JVM.
	"-Xmx"?: null | string @go(Xmx,*string)

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	gcLoggingEnabled?: null | bool @go(GcLoggingEnabled,*bool)

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	javaSystemProperties?: [...#KafkaNodePoolSpecJvmOptionsJavaSystemPropertiesElem] @go(JavaSystemProperties,[]KafkaNodePoolSpecJvmOptionsJavaSystemPropertiesElem)
}

#KafkaNodePoolSpecJvmOptionsJavaSystemPropertiesElem: {
	// The system property name.
	name?: null | string @go(Name,*string)

	// The system property value.
	value?: null | string @go(Value,*string)
}

// A map of -XX options to the JVM.
#KafkaNodePoolSpecJvmOptionsXX: {[string]: string}

// CPU and memory resources to reserve.
#KafkaNodePoolSpecResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaNodePoolSpecResourcesClaimsElem] @go(Claims,[]KafkaNodePoolSpecResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

#KafkaNodePoolSpecResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

#KafkaNodePoolSpecRolesElem: _ // #enumKafkaNodePoolSpecRolesElem

#enumKafkaNodePoolSpecRolesElem:
	#KafkaNodePoolSpecRolesElemBroker |
	#KafkaNodePoolSpecRolesElemController

#KafkaNodePoolSpecRolesElemBroker: #KafkaNodePoolSpecRolesElem & "broker"

#KafkaNodePoolSpecRolesElemController: #KafkaNodePoolSpecRolesElem & "controller"

// Storage configuration (disk). Cannot be updated.
#KafkaNodePoolSpecStorage: _

#KafkaNodePoolSpecStorageOverridesElem: {
	// Id of the kafka broker (broker identifier).
	broker?: null | int32 @go(Broker,*int32)

	// The storage class to use for dynamic volume allocation for this broker.
	class?: null | string @go(Class,*string)
}

// Specifies a specific persistent volume to use. It contains key:value pairs
// representing labels for selecting such a volume.
#KafkaNodePoolSpecStorageSelector: {[string]: string}

#KafkaNodePoolSpecStorageType: _ // #enumKafkaNodePoolSpecStorageType

#enumKafkaNodePoolSpecStorageType:
	#KafkaNodePoolSpecStorageTypeEphemeral |
	#KafkaNodePoolSpecStorageTypeJbod |
	#KafkaNodePoolSpecStorageTypePersistentClaim

#KafkaNodePoolSpecStorageTypeEphemeral: #KafkaNodePoolSpecStorageType & "ephemeral"

#KafkaNodePoolSpecStorageTypeJbod: #KafkaNodePoolSpecStorageType & "jbod"

#KafkaNodePoolSpecStorageTypePersistentClaim: #KafkaNodePoolSpecStorageType & "persistent-claim"

#KafkaNodePoolSpecStorageVolumesElem: _

#KafkaNodePoolSpecStorageVolumesElemOverridesElem: {
	// Id of the kafka broker (broker identifier).
	broker?: null | int32 @go(Broker,*int32)

	// The storage class to use for dynamic volume allocation for this broker.
	class?: null | string @go(Class,*string)
}

// Specifies a specific persistent volume to use. It contains key:value pairs
// representing labels for selecting such a volume.
#KafkaNodePoolSpecStorageVolumesElemSelector: {[string]: string}

#KafkaNodePoolSpecStorageVolumesElemType: _ // #enumKafkaNodePoolSpecStorageVolumesElemType

#enumKafkaNodePoolSpecStorageVolumesElemType:
	#KafkaNodePoolSpecStorageVolumesElemTypeEphemeral |
	#KafkaNodePoolSpecStorageVolumesElemTypePersistentClaim

#KafkaNodePoolSpecStorageVolumesElemTypeEphemeral: #KafkaNodePoolSpecStorageVolumesElemType & "ephemeral"

#KafkaNodePoolSpecStorageVolumesElemTypePersistentClaim: #KafkaNodePoolSpecStorageVolumesElemType & "persistent-claim"

// Template for pool resources. The template allows users to specify how the
// resources belonging to this pool are generated.
#KafkaNodePoolSpecTemplate: {
	// Template for the Kafka init container.
	initContainer?: null | #KafkaNodePoolSpecTemplateInitContainer @go(InitContainer,*KafkaNodePoolSpecTemplateInitContainer)

	// Template for the Kafka broker container.
	kafkaContainer?: null | #KafkaNodePoolSpecTemplateKafkaContainer @go(KafkaContainer,*KafkaNodePoolSpecTemplateKafkaContainer)

	// Template for Kafka per-pod `Ingress` used for access from outside of
	// Kubernetes.
	perPodIngress?: null | #KafkaNodePoolSpecTemplatePerPodIngress @go(PerPodIngress,*KafkaNodePoolSpecTemplatePerPodIngress)

	// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
	perPodRoute?: null | #KafkaNodePoolSpecTemplatePerPodRoute @go(PerPodRoute,*KafkaNodePoolSpecTemplatePerPodRoute)

	// Template for Kafka per-pod `Services` used for access from outside of
	// Kubernetes.
	perPodService?: null | #KafkaNodePoolSpecTemplatePerPodService @go(PerPodService,*KafkaNodePoolSpecTemplatePerPodService)

	// Template for all Kafka `PersistentVolumeClaims`.
	persistentVolumeClaim?: null | #KafkaNodePoolSpecTemplatePersistentVolumeClaim @go(PersistentVolumeClaim,*KafkaNodePoolSpecTemplatePersistentVolumeClaim)

	// Template for Kafka `Pods`.
	pod?: null | #KafkaNodePoolSpecTemplatePod @go(Pod,*KafkaNodePoolSpecTemplatePod)

	// Template for Kafka `StrimziPodSet` resource.
	podSet?: null | #KafkaNodePoolSpecTemplatePodSet @go(PodSet,*KafkaNodePoolSpecTemplatePodSet)
}

// Template for the Kafka init container.
#KafkaNodePoolSpecTemplateInitContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaNodePoolSpecTemplateInitContainerEnvElem] @go(Env,[]KafkaNodePoolSpecTemplateInitContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaNodePoolSpecTemplateInitContainerSecurityContext @go(SecurityContext,*KafkaNodePoolSpecTemplateInitContainerSecurityContext)
}

#KafkaNodePoolSpecTemplateInitContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// Security context for the container.
#KafkaNodePoolSpecTemplateInitContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaNodePoolSpecTemplateInitContainerSecurityContextCapabilities @go(Capabilities,*KafkaNodePoolSpecTemplateInitContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaNodePoolSpecTemplateInitContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaNodePoolSpecTemplateInitContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaNodePoolSpecTemplateInitContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaNodePoolSpecTemplateInitContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaNodePoolSpecTemplateInitContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaNodePoolSpecTemplateInitContainerSecurityContextWindowsOptions)
}

#KafkaNodePoolSpecTemplateInitContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaNodePoolSpecTemplateInitContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaNodePoolSpecTemplateInitContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaNodePoolSpecTemplateInitContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for the Kafka broker container.
#KafkaNodePoolSpecTemplateKafkaContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaNodePoolSpecTemplateKafkaContainerEnvElem] @go(Env,[]KafkaNodePoolSpecTemplateKafkaContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaNodePoolSpecTemplateKafkaContainerSecurityContext @go(SecurityContext,*KafkaNodePoolSpecTemplateKafkaContainerSecurityContext)
}

#KafkaNodePoolSpecTemplateKafkaContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// Security context for the container.
#KafkaNodePoolSpecTemplateKafkaContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaNodePoolSpecTemplateKafkaContainerSecurityContextCapabilities @go(Capabilities,*KafkaNodePoolSpecTemplateKafkaContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaNodePoolSpecTemplateKafkaContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaNodePoolSpecTemplateKafkaContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaNodePoolSpecTemplateKafkaContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaNodePoolSpecTemplateKafkaContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaNodePoolSpecTemplateKafkaContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaNodePoolSpecTemplateKafkaContainerSecurityContextWindowsOptions)
}

#KafkaNodePoolSpecTemplateKafkaContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaNodePoolSpecTemplateKafkaContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaNodePoolSpecTemplateKafkaContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaNodePoolSpecTemplateKafkaContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for Kafka per-pod `Ingress` used for access from outside of Kubernetes.
#KafkaNodePoolSpecTemplatePerPodIngress: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaNodePoolSpecTemplatePerPodIngressMetadata @go(Metadata,*KafkaNodePoolSpecTemplatePerPodIngressMetadata)
}

// Metadata applied to the resource.
#KafkaNodePoolSpecTemplatePerPodIngressMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaNodePoolSpecTemplatePerPodIngressMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaNodePoolSpecTemplatePerPodIngressMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePerPodIngressMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePerPodIngressMetadataLabels: {[string]: string}

// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
#KafkaNodePoolSpecTemplatePerPodRoute: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaNodePoolSpecTemplatePerPodRouteMetadata @go(Metadata,*KafkaNodePoolSpecTemplatePerPodRouteMetadata)
}

// Metadata applied to the resource.
#KafkaNodePoolSpecTemplatePerPodRouteMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaNodePoolSpecTemplatePerPodRouteMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaNodePoolSpecTemplatePerPodRouteMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePerPodRouteMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePerPodRouteMetadataLabels: {[string]: string}

// Template for Kafka per-pod `Services` used for access from outside of
// Kubernetes.
#KafkaNodePoolSpecTemplatePerPodService: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaNodePoolSpecTemplatePerPodServiceMetadata @go(Metadata,*KafkaNodePoolSpecTemplatePerPodServiceMetadata)
}

// Metadata applied to the resource.
#KafkaNodePoolSpecTemplatePerPodServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaNodePoolSpecTemplatePerPodServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaNodePoolSpecTemplatePerPodServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePerPodServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePerPodServiceMetadataLabels: {[string]: string}

// Template for all Kafka `PersistentVolumeClaims`.
#KafkaNodePoolSpecTemplatePersistentVolumeClaim: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaNodePoolSpecTemplatePersistentVolumeClaimMetadata @go(Metadata,*KafkaNodePoolSpecTemplatePersistentVolumeClaimMetadata)
}

// Metadata applied to the resource.
#KafkaNodePoolSpecTemplatePersistentVolumeClaimMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaNodePoolSpecTemplatePersistentVolumeClaimMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaNodePoolSpecTemplatePersistentVolumeClaimMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePersistentVolumeClaimMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePersistentVolumeClaimMetadataLabels: {[string]: string}

// Template for Kafka `Pods`.
#KafkaNodePoolSpecTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaNodePoolSpecTemplatePodAffinity @go(Affinity,*KafkaNodePoolSpecTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaNodePoolSpecTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaNodePoolSpecTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaNodePoolSpecTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaNodePoolSpecTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaNodePoolSpecTemplatePodMetadata @go(Metadata,*KafkaNodePoolSpecTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaNodePoolSpecTemplatePodSecurityContext @go(SecurityContext,*KafkaNodePoolSpecTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaNodePoolSpecTemplatePodTolerationsElem] @go(Tolerations,[]KafkaNodePoolSpecTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElem)
}

// The pod's affinity rules.
#KafkaNodePoolSpecTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaNodePoolSpecTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaNodePoolSpecTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaNodePoolSpecTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinity)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaNodePoolSpecTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Metadata applied to the resource.
#KafkaNodePoolSpecTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaNodePoolSpecTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaNodePoolSpecTemplatePodMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePodMetadataLabels: {[string]: string}

// Configures pod-level security attributes and common container settings.
#KafkaNodePoolSpecTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaNodePoolSpecTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaNodePoolSpecTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaNodePoolSpecTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaNodePoolSpecTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaNodePoolSpecTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaNodePoolSpecTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaNodePoolSpecTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaNodePoolSpecTemplatePodSecurityContextWindowsOptions)
}

#KafkaNodePoolSpecTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaNodePoolSpecTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaNodePoolSpecTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaNodePoolSpecTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for Kafka `StrimziPodSet` resource.
#KafkaNodePoolSpecTemplatePodSet: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaNodePoolSpecTemplatePodSetMetadata @go(Metadata,*KafkaNodePoolSpecTemplatePodSetMetadata)
}

// Metadata applied to the resource.
#KafkaNodePoolSpecTemplatePodSetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaNodePoolSpecTemplatePodSetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaNodePoolSpecTemplatePodSetMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePodSetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaNodePoolSpecTemplatePodSetMetadataLabels: {[string]: string}

#KafkaNodePoolSpecTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

#KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

#KafkaNodePoolSpecTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaNodePoolStatusConditionsElem: {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	lastTransitionTime?: null | string @go(LastTransitionTime,*string)

	// Human-readable message indicating details about the condition's last
	// transition.
	message?: null | string @go(Message,*string)

	// The reason for the condition's last transition (a single word in CamelCase).
	reason?: null | string @go(Reason,*string)

	// The status of the condition, either True, False or Unknown.
	status?: null | string @go(Status,*string)

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	type?: null | string @go(Type,*string)
}

#KafkaNodePoolStatusRolesElem: _ // #enumKafkaNodePoolStatusRolesElem

#enumKafkaNodePoolStatusRolesElem:
	#KafkaNodePoolStatusRolesElemController |
	#KafkaNodePoolStatusRolesElemBroker

#KafkaNodePoolStatusRolesElemController: #KafkaNodePoolStatusRolesElem & "controller"

#KafkaNodePoolStatusRolesElemBroker: #KafkaNodePoolStatusRolesElem & "broker"

// The status of the KafkaNodePool.
#KafkaNodePoolStatus: {
	// Kafka cluster ID.
	clusterId?: null | string @go(ClusterId,*string)

	// List of status conditions.
	conditions?: [...#KafkaNodePoolStatusConditionsElem] @go(Conditions,[]KafkaNodePoolStatusConditionsElem)

	// Label selector for pods providing this resource.
	labelSelector?: null | string @go(LabelSelector,*string)

	// Node IDs used by Kafka nodes in this pool.
	nodeIds?: [...int32] @go(NodeIds,[]int32)

	// The generation of the CRD that was last reconciled by the operator.
	observedGeneration?: null | int32 @go(ObservedGeneration,*int32)

	// The current number of pods being used to provide this resource.
	replicas?: null | int32 @go(Replicas,*int32)

	// The roles currently assigned to this pool.
	roles?: [...#KafkaNodePoolStatusRolesElem] @go(Roles,[]KafkaNodePoolStatusRolesElem)
}
