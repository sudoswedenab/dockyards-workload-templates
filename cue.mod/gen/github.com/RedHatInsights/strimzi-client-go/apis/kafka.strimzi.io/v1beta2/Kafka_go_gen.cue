// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/RedHatInsights/strimzi-client-go/apis/kafka.strimzi.io/v1beta2

package v1beta2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// Kafka
#Kafka: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
	spec?: null | #KafkaSpec @go(Spec,*KafkaSpec)

	// The status of the Kafka and ZooKeeper clusters, and Topic Operator.
	status?: null | #KafkaStatus @go(Status,*KafkaStatus)
}

// +kubebuilder:object:root=true
// KafkaList contains a list of instances.
#KafkaList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)

	// A list of Kafka objects.
	items?: [...#Kafka] @go(Items,[]Kafka)
}

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaSpecClientsCaCertificateExpirationPolicyRenewCertificate: #KafkaSpecClientsCaCertificateExpirationPolicy & "renew-certificate"

#KafkaSpecClientsCaCertificateExpirationPolicyReplaceKey: #KafkaSpecClientsCaCertificateExpirationPolicy & "replace-key"

// Configuration of the clients certificate authority.
#KafkaSpecClientsCa: {
	// How should CA certificate expiration be handled when
	// `generateCertificateAuthority=true`. The default is for a new CA certificate to
	// be generated reusing the existing private key.
	certificateExpirationPolicy?: null | #KafkaSpecClientsCaCertificateExpirationPolicy @go(CertificateExpirationPolicy,*KafkaSpecClientsCaCertificateExpirationPolicy)

	// If true then Certificate Authority certificates will be generated
	// automatically. Otherwise the user will need to provide a Secret with the CA
	// certificate. Default is true.
	generateCertificateAuthority?: null | bool @go(GenerateCertificateAuthority,*bool)

	// If `true`, the Cluster and Client CA Secrets are configured with the
	// `ownerReference` set to the `Kafka` resource. If the `Kafka` resource is
	// deleted when `true`, the CA Secrets are also deleted. If `false`, the
	// `ownerReference` is disabled. If the `Kafka` resource is deleted when `false`,
	// the CA Secrets are retained and available for reuse. Default is `true`.
	generateSecretOwnerReference?: null | bool @go(GenerateSecretOwnerReference,*bool)

	// The number of days in the certificate renewal period. This is the number of
	// days before the a certificate expires during which renewal actions may be
	// performed. When `generateCertificateAuthority` is true, this will cause the
	// generation of a new certificate. When `generateCertificateAuthority` is true,
	// this will cause extra logging at WARN level about the pending certificate
	// expiry. Default is 30.
	renewalDays?: null | int32 @go(RenewalDays,*int32)

	// The number of days generated certificates should be valid for. The default is
	// 365.
	validityDays?: null | int32 @go(ValidityDays,*int32)
}

#KafkaSpecClusterCaCertificateExpirationPolicy: _ // #enumKafkaSpecClusterCaCertificateExpirationPolicy

#enumKafkaSpecClusterCaCertificateExpirationPolicy:
	#KafkaSpecClusterCaCertificateExpirationPolicyRenewCertificate |
	#KafkaSpecClusterCaCertificateExpirationPolicyReplaceKey

#KafkaSpecClusterCaCertificateExpirationPolicyRenewCertificate: #KafkaSpecClusterCaCertificateExpirationPolicy & "renew-certificate"

#KafkaSpecClusterCaCertificateExpirationPolicyReplaceKey: #KafkaSpecClusterCaCertificateExpirationPolicy & "replace-key"

// Configuration of the cluster certificate authority.
#KafkaSpecClusterCa: {
	// How should CA certificate expiration be handled when
	// `generateCertificateAuthority=true`. The default is for a new CA certificate to
	// be generated reusing the existing private key.
	certificateExpirationPolicy?: null | #KafkaSpecClusterCaCertificateExpirationPolicy @go(CertificateExpirationPolicy,*KafkaSpecClusterCaCertificateExpirationPolicy)

	// If true then Certificate Authority certificates will be generated
	// automatically. Otherwise the user will need to provide a Secret with the CA
	// certificate. Default is true.
	generateCertificateAuthority?: null | bool @go(GenerateCertificateAuthority,*bool)

	// If `true`, the Cluster and Client CA Secrets are configured with the
	// `ownerReference` set to the `Kafka` resource. If the `Kafka` resource is
	// deleted when `true`, the CA Secrets are also deleted. If `false`, the
	// `ownerReference` is disabled. If the `Kafka` resource is deleted when `false`,
	// the CA Secrets are retained and available for reuse. Default is `true`.
	generateSecretOwnerReference?: null | bool @go(GenerateSecretOwnerReference,*bool)

	// The number of days in the certificate renewal period. This is the number of
	// days before the a certificate expires during which renewal actions may be
	// performed. When `generateCertificateAuthority` is true, this will cause the
	// generation of a new certificate. When `generateCertificateAuthority` is true,
	// this will cause extra logging at WARN level about the pending certificate
	// expiry. Default is 30.
	renewalDays?: null | int32 @go(RenewalDays,*int32)

	// The number of days generated certificates should be valid for. The default is
	// 365.
	validityDays?: null | int32 @go(ValidityDays,*int32)
}

#KafkaSpecCruiseControlBrokerCapacityOverridesElem: _

// The Cruise Control `brokerCapacity` configuration.
#KafkaSpecCruiseControlBrokerCapacity: {
	// Broker capacity for CPU resource in cores or millicores. For example, 1, 1.500,
	// 1500m. For more information on valid CPU resource units see
	// https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu.
	cpu?: null | string @go(Cpu,*string)

	// Broker capacity for CPU resource utilization as a percentage (0 - 100).
	cpuUtilization?: null | int32 @go(CpuUtilization,*int32)

	// Broker capacity for disk in bytes. Use a number value with either standard
	// Kubernetes byte units (K, M, G, or T), their bibyte (power of two) equivalents
	// (Ki, Mi, Gi, or Ti), or a byte value with or without E notation. For example,
	// 100000M, 100000Mi, 104857600000, or 1e+11.
	disk?: null | string @go(Disk,*string)

	// Broker capacity for inbound network throughput in bytes per second. Use an
	// integer value with standard Kubernetes byte units (K, M, G) or their bibyte
	// (power of two) equivalents (Ki, Mi, Gi) per second. For example, 10000KiB/s.
	inboundNetwork?: null | string @go(InboundNetwork,*string)

	// Broker capacity for outbound network throughput in bytes per second. Use an
	// integer value with standard Kubernetes byte units (K, M, G) or their bibyte
	// (power of two) equivalents (Ki, Mi, Gi) per second. For example, 10000KiB/s.
	outboundNetwork?: null | string @go(OutboundNetwork,*string)

	// Overrides for individual brokers. The `overrides` property lets you specify a
	// different capacity configuration for different brokers.
	overrides?: [...#KafkaSpecCruiseControlBrokerCapacityOverridesElem] @go(Overrides,[]KafkaSpecCruiseControlBrokerCapacityOverridesElem)
}

// A map of -XX options to the JVM.
#KafkaSpecCruiseControlJvmOptionsXX: {[string]: string}

#KafkaSpecCruiseControlJvmOptionsJavaSystemPropertiesElem: {
	// The system property name.
	name?: null | string @go(Name,*string)

	// The system property value.
	value?: null | string @go(Value,*string)
}

// JVM Options for the Cruise Control container.
#KafkaSpecCruiseControlJvmOptions: {
	// A map of -XX options to the JVM.
	"-XX"?: #KafkaSpecCruiseControlJvmOptionsXX @go(XX)

	// -Xms option to to the JVM.
	"-Xms"?: null | string @go(Xms,*string)

	// -Xmx option to to the JVM.
	"-Xmx"?: null | string @go(Xmx,*string)

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	gcLoggingEnabled?: null | bool @go(GcLoggingEnabled,*bool)

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	javaSystemProperties?: [...#KafkaSpecCruiseControlJvmOptionsJavaSystemPropertiesElem] @go(JavaSystemProperties,[]KafkaSpecCruiseControlJvmOptionsJavaSystemPropertiesElem)
}

// Pod liveness checking for the Cruise Control container.
#KafkaSpecCruiseControlLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// A Map from logger name to logger level.
#KafkaSpecCruiseControlLoggingLoggers: {[string]: string}

#KafkaSpecCruiseControlLoggingType: _ // #enumKafkaSpecCruiseControlLoggingType

#enumKafkaSpecCruiseControlLoggingType:
	#KafkaSpecCruiseControlLoggingTypeInline |
	#KafkaSpecCruiseControlLoggingTypeExternal

#KafkaSpecCruiseControlLoggingTypeInline: #KafkaSpecCruiseControlLoggingType & "inline"

#KafkaSpecCruiseControlLoggingTypeExternal: #KafkaSpecCruiseControlLoggingType & "external"

// Reference to the key in the ConfigMap containing the configuration.
#KafkaSpecCruiseControlLoggingValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// `ConfigMap` entry where the logging configuration is stored.
#KafkaSpecCruiseControlLoggingValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaSpecCruiseControlLoggingValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaSpecCruiseControlLoggingValueFromConfigMapKeyRef)
}

// Logging configuration (Log4j 2) for Cruise Control.
#KafkaSpecCruiseControlLogging: _

#KafkaSpecCruiseControlMetricsConfigType: _ // #enumKafkaSpecCruiseControlMetricsConfigType

#enumKafkaSpecCruiseControlMetricsConfigType:
	#KafkaSpecCruiseControlMetricsConfigTypeJmxPrometheusExporter

// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
#KafkaSpec: _

#KafkaSpecCruiseControlMetricsConfigTypeJmxPrometheusExporter: #KafkaSpecCruiseControlMetricsConfigType & "jmxPrometheusExporter"

// Reference to the key in the ConfigMap containing the configuration.
#KafkaSpecCruiseControlMetricsConfigValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
#KafkaSpecCruiseControlMetricsConfigValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaSpecCruiseControlMetricsConfigValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaSpecCruiseControlMetricsConfigValueFromConfigMapKeyRef)
}

// Metrics configuration.
#KafkaSpecCruiseControlMetricsConfig: _

// Pod readiness checking for the Cruise Control container.
#KafkaSpecCruiseControlReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

#KafkaSpecCruiseControlResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// CPU and memory resources to reserve for the Cruise Control container.
#KafkaSpecCruiseControlResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecCruiseControlResourcesClaimsElem] @go(Claims,[]KafkaSpecCruiseControlResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

#KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElem: _ // #enumKafkaSpecCruiseControlTemplateApiServiceIpFamiliesElem

#enumKafkaSpecCruiseControlTemplateApiServiceIpFamiliesElem:
	#KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElemIPv4 |
	#KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElemIPv6

#KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElemIPv4: #KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElem & "IPv4"

#KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElemIPv6: #KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElem & "IPv6"

#KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy: _ // #enumKafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy

#enumKafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy:
	#KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicySingleStack |
	#KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicyPreferDualStack |
	#KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicyRequireDualStack

#KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicySingleStack: #KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy & "SingleStack"

#KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicyPreferDualStack: #KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy & "PreferDualStack"

#KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicyRequireDualStack: #KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy & "RequireDualStack"

// Annotations added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplateApiServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplateApiServiceMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecCruiseControlTemplateApiServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecCruiseControlTemplateApiServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecCruiseControlTemplateApiServiceMetadataLabels @go(Labels)
}

// Template for Cruise Control API `Service`.
#KafkaSpecCruiseControlTemplateApiService: {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	ipFamilies?: [...#KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElem] @go(IpFamilies,[]KafkaSpecCruiseControlTemplateApiServiceIpFamiliesElem)

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	ipFamilyPolicy?: null | #KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy @go(IpFamilyPolicy,*KafkaSpecCruiseControlTemplateApiServiceIpFamilyPolicy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecCruiseControlTemplateApiServiceMetadata @go(Metadata,*KafkaSpecCruiseControlTemplateApiServiceMetadata)
}

#KafkaSpecCruiseControlTemplateCruiseControlContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

#KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Security context for the container.
#KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContextWindowsOptions)
}

// Template for the Cruise Control container.
#KafkaSpecCruiseControlTemplateCruiseControlContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecCruiseControlTemplateCruiseControlContainerEnvElem] @go(Env,[]KafkaSpecCruiseControlTemplateCruiseControlContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContext @go(SecurityContext,*KafkaSpecCruiseControlTemplateCruiseControlContainerSecurityContext)
}

#KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategy: _ // #enumKafkaSpecCruiseControlTemplateDeploymentDeploymentStrategy

#enumKafkaSpecCruiseControlTemplateDeploymentDeploymentStrategy:
	#KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategyRollingUpdate |
	#KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategyRecreate

#KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategyRollingUpdate: #KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategy & "RollingUpdate"

#KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategyRecreate: #KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategy & "Recreate"

// Annotations added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplateDeploymentMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplateDeploymentMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecCruiseControlTemplateDeploymentMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecCruiseControlTemplateDeploymentMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecCruiseControlTemplateDeploymentMetadataLabels @go(Labels)
}

// Template for Cruise Control `Deployment`.
#KafkaSpecCruiseControlTemplateDeployment: {
	// Pod replacement strategy for deployment configuration changes. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	deploymentStrategy?: null | #KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategy @go(DeploymentStrategy,*KafkaSpecCruiseControlTemplateDeploymentDeploymentStrategy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecCruiseControlTemplateDeploymentMetadata @go(Metadata,*KafkaSpecCruiseControlTemplateDeploymentMetadata)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecCruiseControlTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecCruiseControlTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

// The pod's affinity rules.
#KafkaSpecCruiseControlTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaSpecCruiseControlTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaSpecCruiseControlTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaSpecCruiseControlTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaSpecCruiseControlTemplatePodAffinityPodAntiAffinity)
}

#KafkaSpecCruiseControlTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaSpecCruiseControlTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplatePodMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecCruiseControlTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecCruiseControlTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecCruiseControlTemplatePodMetadataLabels @go(Labels)
}

#KafkaSpecCruiseControlTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecCruiseControlTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecCruiseControlTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecCruiseControlTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Configures pod-level security attributes and common container settings.
#KafkaSpecCruiseControlTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecCruiseControlTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecCruiseControlTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecCruiseControlTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecCruiseControlTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaSpecCruiseControlTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaSpecCruiseControlTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecCruiseControlTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecCruiseControlTemplatePodSecurityContextWindowsOptions)
}

#KafkaSpecCruiseControlTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

// Template for Cruise Control `Pods`.
#KafkaSpecCruiseControlTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaSpecCruiseControlTemplatePodAffinity @go(Affinity,*KafkaSpecCruiseControlTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaSpecCruiseControlTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaSpecCruiseControlTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaSpecCruiseControlTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaSpecCruiseControlTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecCruiseControlTemplatePodMetadata @go(Metadata,*KafkaSpecCruiseControlTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaSpecCruiseControlTemplatePodSecurityContext @go(SecurityContext,*KafkaSpecCruiseControlTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaSpecCruiseControlTemplatePodTolerationsElem] @go(Tolerations,[]KafkaSpecCruiseControlTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaSpecCruiseControlTemplatePodTopologySpreadConstraintsElem)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadataLabels: {[string]: string}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
#KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadataLabels @go(Labels)
}

// Template for Cruise Control `PodDisruptionBudget`.
#KafkaSpecCruiseControlTemplatePodDisruptionBudget: {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	maxUnavailable?: null | int32 @go(MaxUnavailable,*int32)

	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	metadata?: null | #KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadata @go(Metadata,*KafkaSpecCruiseControlTemplatePodDisruptionBudgetMetadata)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplateServiceAccountMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecCruiseControlTemplateServiceAccountMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecCruiseControlTemplateServiceAccountMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecCruiseControlTemplateServiceAccountMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecCruiseControlTemplateServiceAccountMetadataLabels @go(Labels)
}

// Template for the Cruise Control service account.
#KafkaSpecCruiseControlTemplateServiceAccount: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecCruiseControlTemplateServiceAccountMetadata @go(Metadata,*KafkaSpecCruiseControlTemplateServiceAccountMetadata)
}

#KafkaSpecCruiseControlTemplateTlsSidecarContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

#KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Security context for the container.
#KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContextWindowsOptions)
}

// Template for the Cruise Control TLS sidecar container.
#KafkaSpecCruiseControlTemplateTlsSidecarContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecCruiseControlTemplateTlsSidecarContainerEnvElem] @go(Env,[]KafkaSpecCruiseControlTemplateTlsSidecarContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContext @go(SecurityContext,*KafkaSpecCruiseControlTemplateTlsSidecarContainerSecurityContext)
}

// Template to specify how Cruise Control resources, `Deployments` and `Pods`, are
// generated.
#KafkaSpecCruiseControlTemplate: {
	// Template for Cruise Control API `Service`.
	apiService?: null | #KafkaSpecCruiseControlTemplateApiService @go(ApiService,*KafkaSpecCruiseControlTemplateApiService)

	// Template for the Cruise Control container.
	cruiseControlContainer?: null | #KafkaSpecCruiseControlTemplateCruiseControlContainer @go(CruiseControlContainer,*KafkaSpecCruiseControlTemplateCruiseControlContainer)

	// Template for Cruise Control `Deployment`.
	deployment?: null | #KafkaSpecCruiseControlTemplateDeployment @go(Deployment,*KafkaSpecCruiseControlTemplateDeployment)

	// Template for Cruise Control `Pods`.
	pod?: null | #KafkaSpecCruiseControlTemplatePod @go(Pod,*KafkaSpecCruiseControlTemplatePod)

	// Template for Cruise Control `PodDisruptionBudget`.
	podDisruptionBudget?: null | #KafkaSpecCruiseControlTemplatePodDisruptionBudget @go(PodDisruptionBudget,*KafkaSpecCruiseControlTemplatePodDisruptionBudget)

	// Template for the Cruise Control service account.
	serviceAccount?: null | #KafkaSpecCruiseControlTemplateServiceAccount @go(ServiceAccount,*KafkaSpecCruiseControlTemplateServiceAccount)

	// Template for the Cruise Control TLS sidecar container.
	tlsSidecarContainer?: null | #KafkaSpecCruiseControlTemplateTlsSidecarContainer @go(TlsSidecarContainer,*KafkaSpecCruiseControlTemplateTlsSidecarContainer)
}

// Pod liveness checking.
#KafkaSpecCruiseControlTlsSidecarLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

#KafkaSpecCruiseControlTlsSidecarLogLevel: _ // #enumKafkaSpecCruiseControlTlsSidecarLogLevel

#enumKafkaSpecCruiseControlTlsSidecarLogLevel:
	#KafkaSpecCruiseControlTlsSidecarLogLevelEmerg |
	#KafkaSpecCruiseControlTlsSidecarLogLevelAlert |
	#KafkaSpecCruiseControlTlsSidecarLogLevelCrit |
	#KafkaSpecCruiseControlTlsSidecarLogLevelErr |
	#KafkaSpecCruiseControlTlsSidecarLogLevelWarning |
	#KafkaSpecCruiseControlTlsSidecarLogLevelNotice |
	#KafkaSpecCruiseControlTlsSidecarLogLevelInfo |
	#KafkaSpecCruiseControlTlsSidecarLogLevelDebug

#KafkaSpecCruiseControlTlsSidecarLogLevelEmerg: #KafkaSpecCruiseControlTlsSidecarLogLevel & "emerg"

#KafkaSpecCruiseControlTlsSidecarLogLevelAlert: #KafkaSpecCruiseControlTlsSidecarLogLevel & "alert"

#KafkaSpecCruiseControlTlsSidecarLogLevelCrit: #KafkaSpecCruiseControlTlsSidecarLogLevel & "crit"

#KafkaSpecCruiseControlTlsSidecarLogLevelErr: #KafkaSpecCruiseControlTlsSidecarLogLevel & "err"

#KafkaSpecCruiseControlTlsSidecarLogLevelWarning: #KafkaSpecCruiseControlTlsSidecarLogLevel & "warning"

#KafkaSpecCruiseControlTlsSidecarLogLevelNotice: #KafkaSpecCruiseControlTlsSidecarLogLevel & "notice"

#KafkaSpecCruiseControlTlsSidecarLogLevelInfo: #KafkaSpecCruiseControlTlsSidecarLogLevel & "info"

#KafkaSpecCruiseControlTlsSidecarLogLevelDebug: #KafkaSpecCruiseControlTlsSidecarLogLevel & "debug"

// Pod readiness checking.
#KafkaSpecCruiseControlTlsSidecarReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

#KafkaSpecCruiseControlTlsSidecarResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// CPU and memory resources to reserve.
#KafkaSpecCruiseControlTlsSidecarResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecCruiseControlTlsSidecarResourcesClaimsElem] @go(Claims,[]KafkaSpecCruiseControlTlsSidecarResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

// TLS sidecar configuration.
#KafkaSpecCruiseControlTlsSidecar: {
	// The docker image for the container.
	image?: null | string @go(Image,*string)

	// Pod liveness checking.
	livenessProbe?: null | #KafkaSpecCruiseControlTlsSidecarLivenessProbe @go(LivenessProbe,*KafkaSpecCruiseControlTlsSidecarLivenessProbe)

	// The log level for the TLS sidecar. Default value is `notice`.
	logLevel?: null | #KafkaSpecCruiseControlTlsSidecarLogLevel @go(LogLevel,*KafkaSpecCruiseControlTlsSidecarLogLevel)

	// Pod readiness checking.
	readinessProbe?: null | #KafkaSpecCruiseControlTlsSidecarReadinessProbe @go(ReadinessProbe,*KafkaSpecCruiseControlTlsSidecarReadinessProbe)

	// CPU and memory resources to reserve.
	resources?: null | #KafkaSpecCruiseControlTlsSidecarResources @go(Resources,*KafkaSpecCruiseControlTlsSidecarResources)
}

// Configuration for Cruise Control deployment. Deploys a Cruise Control instance
// when specified.
#KafkaSpecCruiseControl: {
	// The Cruise Control `brokerCapacity` configuration.
	brokerCapacity?: null | #KafkaSpecCruiseControlBrokerCapacity @go(BrokerCapacity,*KafkaSpecCruiseControlBrokerCapacity)

	// The Cruise Control configuration. For a full list of configuration options
	// refer to https://github.com/linkedin/cruise-control/wiki/Configurations. Note
	// that properties with the following prefixes cannot be set: bootstrap.servers,
	// client.id, zookeeper., network., security.,
	// failed.brokers.zk.path,webserver.http., webserver.api.urlprefix,
	// webserver.session.path, webserver.accesslog., two.step.,
	// request.reason.required,metric.reporter.sampler.bootstrap.servers,
	// capacity.config.file, self.healing., ssl.,
	// kafka.broker.failure.detection.enable, topic.config.provider.class (with the
	// exception of: ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols,
	// webserver.http.cors.enabled, webserver.http.cors.origin,
	// webserver.http.cors.exposeheaders, webserver.security.enable,
	// webserver.ssl.enable).
	config?: null | apiextensions.#JSON @go(Config,*apiextensions.JSON)

	// The container image used for Cruise Control pods. If no image name is
	// explicitly specified, the image name corresponds to the name specified in the
	// Cluster Operator configuration. If an image name is not defined in the Cluster
	// Operator configuration, a default value is used.
	image?: null | string @go(Image,*string)

	// JVM Options for the Cruise Control container.
	jvmOptions?: null | #KafkaSpecCruiseControlJvmOptions @go(JvmOptions,*KafkaSpecCruiseControlJvmOptions)

	// Pod liveness checking for the Cruise Control container.
	livenessProbe?: null | #KafkaSpecCruiseControlLivenessProbe @go(LivenessProbe,*KafkaSpecCruiseControlLivenessProbe)

	// Logging configuration (Log4j 2) for Cruise Control.
	logging?: null | #KafkaSpecCruiseControlLogging @go(Logging,*KafkaSpecCruiseControlLogging)

	// Metrics configuration.
	metricsConfig?: null | #KafkaSpecCruiseControlMetricsConfig @go(MetricsConfig,*KafkaSpecCruiseControlMetricsConfig)

	// Pod readiness checking for the Cruise Control container.
	readinessProbe?: null | #KafkaSpecCruiseControlReadinessProbe @go(ReadinessProbe,*KafkaSpecCruiseControlReadinessProbe)

	// CPU and memory resources to reserve for the Cruise Control container.
	resources?: null | #KafkaSpecCruiseControlResources @go(Resources,*KafkaSpecCruiseControlResources)

	// Template to specify how Cruise Control resources, `Deployments` and `Pods`, are
	// generated.
	template?: null | #KafkaSpecCruiseControlTemplate @go(Template,*KafkaSpecCruiseControlTemplate)

	// TLS sidecar configuration.
	tlsSidecar?: null | #KafkaSpecCruiseControlTlsSidecar @go(TlsSidecar,*KafkaSpecCruiseControlTlsSidecar)
}

#KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategy: _ // #enumKafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategy

#enumKafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategy:
	#KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategyRollingUpdate |
	#KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategyRecreate

#KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategyRollingUpdate: #KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategy & "RollingUpdate"

#KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategyRecreate: #KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategy & "Recreate"

// Annotations added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateDeploymentMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateDeploymentMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecEntityOperatorTemplateDeploymentMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecEntityOperatorTemplateDeploymentMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecEntityOperatorTemplateDeploymentMetadataLabels @go(Labels)
}

// Template for Entity Operator `Deployment`.
#KafkaSpecEntityOperatorTemplateDeployment: {
	// Pod replacement strategy for deployment configuration changes. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	deploymentStrategy?: null | #KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategy @go(DeploymentStrategy,*KafkaSpecEntityOperatorTemplateDeploymentDeploymentStrategy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecEntityOperatorTemplateDeploymentMetadata @go(Metadata,*KafkaSpecEntityOperatorTemplateDeploymentMetadata)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateEntityOperatorRoleMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateEntityOperatorRoleMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecEntityOperatorTemplateEntityOperatorRoleMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecEntityOperatorTemplateEntityOperatorRoleMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecEntityOperatorTemplateEntityOperatorRoleMetadataLabels @go(Labels)
}

// Template for the Entity Operator Role.
#KafkaSpecEntityOperatorTemplateEntityOperatorRole: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecEntityOperatorTemplateEntityOperatorRoleMetadata @go(Metadata,*KafkaSpecEntityOperatorTemplateEntityOperatorRoleMetadata)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

// The pod's affinity rules.
#KafkaSpecEntityOperatorTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaSpecEntityOperatorTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaSpecEntityOperatorTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaSpecEntityOperatorTemplatePodAffinityPodAntiAffinity)
}

#KafkaSpecEntityOperatorTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaSpecEntityOperatorTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplatePodMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecEntityOperatorTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecEntityOperatorTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecEntityOperatorTemplatePodMetadataLabels @go(Labels)
}

#KafkaSpecEntityOperatorTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecEntityOperatorTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecEntityOperatorTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecEntityOperatorTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Configures pod-level security attributes and common container settings.
#KafkaSpecEntityOperatorTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecEntityOperatorTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecEntityOperatorTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecEntityOperatorTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecEntityOperatorTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaSpecEntityOperatorTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaSpecEntityOperatorTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecEntityOperatorTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecEntityOperatorTemplatePodSecurityContextWindowsOptions)
}

#KafkaSpecEntityOperatorTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

// Template for Entity Operator `Pods`.
#KafkaSpecEntityOperatorTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaSpecEntityOperatorTemplatePodAffinity @go(Affinity,*KafkaSpecEntityOperatorTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaSpecEntityOperatorTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaSpecEntityOperatorTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaSpecEntityOperatorTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaSpecEntityOperatorTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecEntityOperatorTemplatePodMetadata @go(Metadata,*KafkaSpecEntityOperatorTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaSpecEntityOperatorTemplatePodSecurityContext @go(SecurityContext,*KafkaSpecEntityOperatorTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaSpecEntityOperatorTemplatePodTolerationsElem] @go(Tolerations,[]KafkaSpecEntityOperatorTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaSpecEntityOperatorTemplatePodTopologySpreadConstraintsElem)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateServiceAccountMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateServiceAccountMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecEntityOperatorTemplateServiceAccountMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecEntityOperatorTemplateServiceAccountMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecEntityOperatorTemplateServiceAccountMetadataLabels @go(Labels)
}

// Template for the Entity Operator service account.
#KafkaSpecEntityOperatorTemplateServiceAccount: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecEntityOperatorTemplateServiceAccountMetadata @go(Metadata,*KafkaSpecEntityOperatorTemplateServiceAccountMetadata)
}

#KafkaSpecEntityOperatorTemplateTlsSidecarContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

#KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Security context for the container.
#KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContextWindowsOptions)
}

// Template for the Entity Operator TLS sidecar container.
#KafkaSpecEntityOperatorTemplateTlsSidecarContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecEntityOperatorTemplateTlsSidecarContainerEnvElem] @go(Env,[]KafkaSpecEntityOperatorTemplateTlsSidecarContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContext @go(SecurityContext,*KafkaSpecEntityOperatorTemplateTlsSidecarContainerSecurityContext)
}

#KafkaSpecEntityOperatorTemplateTopicOperatorContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

#KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Security context for the container.
#KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContextWindowsOptions)
}

// Template for the Entity Topic Operator container.
#KafkaSpecEntityOperatorTemplateTopicOperatorContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecEntityOperatorTemplateTopicOperatorContainerEnvElem] @go(Env,[]KafkaSpecEntityOperatorTemplateTopicOperatorContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContext @go(SecurityContext,*KafkaSpecEntityOperatorTemplateTopicOperatorContainerSecurityContext)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateTopicOperatorRoleBindingMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateTopicOperatorRoleBindingMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecEntityOperatorTemplateTopicOperatorRoleBindingMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecEntityOperatorTemplateTopicOperatorRoleBindingMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecEntityOperatorTemplateTopicOperatorRoleBindingMetadataLabels @go(Labels)
}

// Template for the Entity Topic Operator RoleBinding.
#KafkaSpecEntityOperatorTemplateTopicOperatorRoleBinding: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecEntityOperatorTemplateTopicOperatorRoleBindingMetadata @go(Metadata,*KafkaSpecEntityOperatorTemplateTopicOperatorRoleBindingMetadata)
}

#KafkaSpecEntityOperatorTemplateUserOperatorContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

#KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Security context for the container.
#KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContextWindowsOptions)
}

// Template for the Entity User Operator container.
#KafkaSpecEntityOperatorTemplateUserOperatorContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecEntityOperatorTemplateUserOperatorContainerEnvElem] @go(Env,[]KafkaSpecEntityOperatorTemplateUserOperatorContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContext @go(SecurityContext,*KafkaSpecEntityOperatorTemplateUserOperatorContainerSecurityContext)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateUserOperatorRoleBindingMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecEntityOperatorTemplateUserOperatorRoleBindingMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecEntityOperatorTemplateUserOperatorRoleBindingMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecEntityOperatorTemplateUserOperatorRoleBindingMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecEntityOperatorTemplateUserOperatorRoleBindingMetadataLabels @go(Labels)
}

// Template for the Entity Topic Operator RoleBinding.
#KafkaSpecEntityOperatorTemplateUserOperatorRoleBinding: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecEntityOperatorTemplateUserOperatorRoleBindingMetadata @go(Metadata,*KafkaSpecEntityOperatorTemplateUserOperatorRoleBindingMetadata)
}

// Template for Entity Operator resources. The template allows users to specify how
// a `Deployment` and `Pod` is generated.
#KafkaSpecEntityOperatorTemplate: {
	// Template for Entity Operator `Deployment`.
	deployment?: null | #KafkaSpecEntityOperatorTemplateDeployment @go(Deployment,*KafkaSpecEntityOperatorTemplateDeployment)

	// Template for the Entity Operator Role.
	entityOperatorRole?: null | #KafkaSpecEntityOperatorTemplateEntityOperatorRole @go(EntityOperatorRole,*KafkaSpecEntityOperatorTemplateEntityOperatorRole)

	// Template for Entity Operator `Pods`.
	pod?: null | #KafkaSpecEntityOperatorTemplatePod @go(Pod,*KafkaSpecEntityOperatorTemplatePod)

	// Template for the Entity Operator service account.
	serviceAccount?: null | #KafkaSpecEntityOperatorTemplateServiceAccount @go(ServiceAccount,*KafkaSpecEntityOperatorTemplateServiceAccount)

	// Template for the Entity Operator TLS sidecar container.
	tlsSidecarContainer?: null | #KafkaSpecEntityOperatorTemplateTlsSidecarContainer @go(TlsSidecarContainer,*KafkaSpecEntityOperatorTemplateTlsSidecarContainer)

	// Template for the Entity Topic Operator container.
	topicOperatorContainer?: null | #KafkaSpecEntityOperatorTemplateTopicOperatorContainer @go(TopicOperatorContainer,*KafkaSpecEntityOperatorTemplateTopicOperatorContainer)

	// Template for the Entity Topic Operator RoleBinding.
	topicOperatorRoleBinding?: null | #KafkaSpecEntityOperatorTemplateTopicOperatorRoleBinding @go(TopicOperatorRoleBinding,*KafkaSpecEntityOperatorTemplateTopicOperatorRoleBinding)

	// Template for the Entity User Operator container.
	userOperatorContainer?: null | #KafkaSpecEntityOperatorTemplateUserOperatorContainer @go(UserOperatorContainer,*KafkaSpecEntityOperatorTemplateUserOperatorContainer)

	// Template for the Entity Topic Operator RoleBinding.
	userOperatorRoleBinding?: null | #KafkaSpecEntityOperatorTemplateUserOperatorRoleBinding @go(UserOperatorRoleBinding,*KafkaSpecEntityOperatorTemplateUserOperatorRoleBinding)
}

// Pod liveness checking.
#KafkaSpecEntityOperatorTlsSidecarLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

#KafkaSpecEntityOperatorTlsSidecarLogLevel: _ // #enumKafkaSpecEntityOperatorTlsSidecarLogLevel

#enumKafkaSpecEntityOperatorTlsSidecarLogLevel:
	#KafkaSpecEntityOperatorTlsSidecarLogLevelEmerg |
	#KafkaSpecEntityOperatorTlsSidecarLogLevelAlert |
	#KafkaSpecEntityOperatorTlsSidecarLogLevelCrit |
	#KafkaSpecEntityOperatorTlsSidecarLogLevelErr |
	#KafkaSpecEntityOperatorTlsSidecarLogLevelWarning |
	#KafkaSpecEntityOperatorTlsSidecarLogLevelNotice |
	#KafkaSpecEntityOperatorTlsSidecarLogLevelInfo |
	#KafkaSpecEntityOperatorTlsSidecarLogLevelDebug

#KafkaSpecEntityOperatorTlsSidecarLogLevelEmerg: #KafkaSpecEntityOperatorTlsSidecarLogLevel & "emerg"

#KafkaSpecEntityOperatorTlsSidecarLogLevelAlert: #KafkaSpecEntityOperatorTlsSidecarLogLevel & "alert"

#KafkaSpecEntityOperatorTlsSidecarLogLevelCrit: #KafkaSpecEntityOperatorTlsSidecarLogLevel & "crit"

#KafkaSpecEntityOperatorTlsSidecarLogLevelErr: #KafkaSpecEntityOperatorTlsSidecarLogLevel & "err"

#KafkaSpecEntityOperatorTlsSidecarLogLevelWarning: #KafkaSpecEntityOperatorTlsSidecarLogLevel & "warning"

#KafkaSpecEntityOperatorTlsSidecarLogLevelNotice: #KafkaSpecEntityOperatorTlsSidecarLogLevel & "notice"

#KafkaSpecEntityOperatorTlsSidecarLogLevelInfo: #KafkaSpecEntityOperatorTlsSidecarLogLevel & "info"

#KafkaSpecEntityOperatorTlsSidecarLogLevelDebug: #KafkaSpecEntityOperatorTlsSidecarLogLevel & "debug"

// Pod readiness checking.
#KafkaSpecEntityOperatorTlsSidecarReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

#KafkaSpecEntityOperatorTlsSidecarResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// CPU and memory resources to reserve.
#KafkaSpecEntityOperatorTlsSidecarResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecEntityOperatorTlsSidecarResourcesClaimsElem] @go(Claims,[]KafkaSpecEntityOperatorTlsSidecarResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

// TLS sidecar configuration.
#KafkaSpecEntityOperatorTlsSidecar: {
	// The docker image for the container.
	image?: null | string @go(Image,*string)

	// Pod liveness checking.
	livenessProbe?: null | #KafkaSpecEntityOperatorTlsSidecarLivenessProbe @go(LivenessProbe,*KafkaSpecEntityOperatorTlsSidecarLivenessProbe)

	// The log level for the TLS sidecar. Default value is `notice`.
	logLevel?: null | #KafkaSpecEntityOperatorTlsSidecarLogLevel @go(LogLevel,*KafkaSpecEntityOperatorTlsSidecarLogLevel)

	// Pod readiness checking.
	readinessProbe?: null | #KafkaSpecEntityOperatorTlsSidecarReadinessProbe @go(ReadinessProbe,*KafkaSpecEntityOperatorTlsSidecarReadinessProbe)

	// CPU and memory resources to reserve.
	resources?: null | #KafkaSpecEntityOperatorTlsSidecarResources @go(Resources,*KafkaSpecEntityOperatorTlsSidecarResources)
}

// A map of -XX options to the JVM.
#KafkaSpecEntityOperatorTopicOperatorJvmOptionsXX: {[string]: string}

#KafkaSpecEntityOperatorTopicOperatorJvmOptionsJavaSystemPropertiesElem: {
	// The system property name.
	name?: null | string @go(Name,*string)

	// The system property value.
	value?: null | string @go(Value,*string)
}

// JVM Options for pods.
#KafkaSpecEntityOperatorTopicOperatorJvmOptions: {
	// A map of -XX options to the JVM.
	"-XX"?: #KafkaSpecEntityOperatorTopicOperatorJvmOptionsXX @go(XX)

	// -Xms option to to the JVM.
	"-Xms"?: null | string @go(Xms,*string)

	// -Xmx option to to the JVM.
	"-Xmx"?: null | string @go(Xmx,*string)

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	gcLoggingEnabled?: null | bool @go(GcLoggingEnabled,*bool)

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	javaSystemProperties?: [...#KafkaSpecEntityOperatorTopicOperatorJvmOptionsJavaSystemPropertiesElem] @go(JavaSystemProperties,[]KafkaSpecEntityOperatorTopicOperatorJvmOptionsJavaSystemPropertiesElem)
}

// Pod liveness checking.
#KafkaSpecEntityOperatorTopicOperatorLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// A Map from logger name to logger level.
#KafkaSpecEntityOperatorTopicOperatorLoggingLoggers: {[string]: string}

#KafkaSpecEntityOperatorTopicOperatorLoggingType: _ // #enumKafkaSpecEntityOperatorTopicOperatorLoggingType

#enumKafkaSpecEntityOperatorTopicOperatorLoggingType:
	#KafkaSpecEntityOperatorTopicOperatorLoggingTypeInline |
	#KafkaSpecEntityOperatorTopicOperatorLoggingTypeExternal

#KafkaSpecEntityOperatorTopicOperatorLoggingTypeInline: #KafkaSpecEntityOperatorTopicOperatorLoggingType & "inline"

#KafkaSpecEntityOperatorTopicOperatorLoggingTypeExternal: #KafkaSpecEntityOperatorTopicOperatorLoggingType & "external"

// Reference to the key in the ConfigMap containing the configuration.
#KafkaSpecEntityOperatorTopicOperatorLoggingValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// `ConfigMap` entry where the logging configuration is stored.
#KafkaSpecEntityOperatorTopicOperatorLoggingValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaSpecEntityOperatorTopicOperatorLoggingValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaSpecEntityOperatorTopicOperatorLoggingValueFromConfigMapKeyRef)
}

// Logging configuration.
#KafkaSpecEntityOperatorTopicOperatorLogging: _

// Pod readiness checking.
#KafkaSpecEntityOperatorTopicOperatorReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

#KafkaSpecEntityOperatorTopicOperatorResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// CPU and memory resources to reserve.
#KafkaSpecEntityOperatorTopicOperatorResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecEntityOperatorTopicOperatorResourcesClaimsElem] @go(Claims,[]KafkaSpecEntityOperatorTopicOperatorResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

// Pod startup checking.
#KafkaSpecEntityOperatorTopicOperatorStartupProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// Configuration of the Topic Operator.
#KafkaSpecEntityOperatorTopicOperator: {
	// The image to use for the Topic Operator.
	image?: null | string @go(Image,*string)

	// JVM Options for pods.
	jvmOptions?: null | #KafkaSpecEntityOperatorTopicOperatorJvmOptions @go(JvmOptions,*KafkaSpecEntityOperatorTopicOperatorJvmOptions)

	// Pod liveness checking.
	livenessProbe?: null | #KafkaSpecEntityOperatorTopicOperatorLivenessProbe @go(LivenessProbe,*KafkaSpecEntityOperatorTopicOperatorLivenessProbe)

	// Logging configuration.
	logging?: null | #KafkaSpecEntityOperatorTopicOperatorLogging @go(Logging,*KafkaSpecEntityOperatorTopicOperatorLogging)

	// Pod readiness checking.
	readinessProbe?: null | #KafkaSpecEntityOperatorTopicOperatorReadinessProbe @go(ReadinessProbe,*KafkaSpecEntityOperatorTopicOperatorReadinessProbe)

	// Interval between periodic reconciliations.
	reconciliationIntervalSeconds?: null | int32 @go(ReconciliationIntervalSeconds,*int32)

	// CPU and memory resources to reserve.
	resources?: null | #KafkaSpecEntityOperatorTopicOperatorResources @go(Resources,*KafkaSpecEntityOperatorTopicOperatorResources)

	// Pod startup checking.
	startupProbe?: null | #KafkaSpecEntityOperatorTopicOperatorStartupProbe @go(StartupProbe,*KafkaSpecEntityOperatorTopicOperatorStartupProbe)

	// The number of attempts at getting topic metadata.
	topicMetadataMaxAttempts?: null | int32 @go(TopicMetadataMaxAttempts,*int32)

	// The namespace the Topic Operator should watch.
	watchedNamespace?: null | string @go(WatchedNamespace,*string)

	// Timeout for the ZooKeeper session.
	zookeeperSessionTimeoutSeconds?: null | int32 @go(ZookeeperSessionTimeoutSeconds,*int32)
}

// A map of -XX options to the JVM.
#KafkaSpecEntityOperatorUserOperatorJvmOptionsXX: {[string]: string}

#KafkaSpecEntityOperatorUserOperatorJvmOptionsJavaSystemPropertiesElem: {
	// The system property name.
	name?: null | string @go(Name,*string)

	// The system property value.
	value?: null | string @go(Value,*string)
}

// JVM Options for pods.
#KafkaSpecEntityOperatorUserOperatorJvmOptions: {
	// A map of -XX options to the JVM.
	"-XX"?: #KafkaSpecEntityOperatorUserOperatorJvmOptionsXX @go(XX)

	// -Xms option to to the JVM.
	"-Xms"?: null | string @go(Xms,*string)

	// -Xmx option to to the JVM.
	"-Xmx"?: null | string @go(Xmx,*string)

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	gcLoggingEnabled?: null | bool @go(GcLoggingEnabled,*bool)

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	javaSystemProperties?: [...#KafkaSpecEntityOperatorUserOperatorJvmOptionsJavaSystemPropertiesElem] @go(JavaSystemProperties,[]KafkaSpecEntityOperatorUserOperatorJvmOptionsJavaSystemPropertiesElem)
}

// Pod liveness checking.
#KafkaSpecEntityOperatorUserOperatorLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// A Map from logger name to logger level.
#KafkaSpecEntityOperatorUserOperatorLoggingLoggers: {[string]: string}

#KafkaSpecEntityOperatorUserOperatorLoggingType: _ // #enumKafkaSpecEntityOperatorUserOperatorLoggingType

#enumKafkaSpecEntityOperatorUserOperatorLoggingType:
	#KafkaSpecEntityOperatorUserOperatorLoggingTypeInline |
	#KafkaSpecEntityOperatorUserOperatorLoggingTypeExternal

#KafkaSpecEntityOperatorUserOperatorLoggingTypeInline: #KafkaSpecEntityOperatorUserOperatorLoggingType & "inline"

#KafkaSpecEntityOperatorUserOperatorLoggingTypeExternal: #KafkaSpecEntityOperatorUserOperatorLoggingType & "external"

// Reference to the key in the ConfigMap containing the configuration.
#KafkaSpecEntityOperatorUserOperatorLoggingValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// `ConfigMap` entry where the logging configuration is stored.
#KafkaSpecEntityOperatorUserOperatorLoggingValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaSpecEntityOperatorUserOperatorLoggingValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaSpecEntityOperatorUserOperatorLoggingValueFromConfigMapKeyRef)
}

// Logging configuration.
#KafkaSpecEntityOperatorUserOperatorLogging: _

// Pod readiness checking.
#KafkaSpecEntityOperatorUserOperatorReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

#KafkaSpecEntityOperatorUserOperatorResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// CPU and memory resources to reserve.
#KafkaSpecEntityOperatorUserOperatorResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecEntityOperatorUserOperatorResourcesClaimsElem] @go(Claims,[]KafkaSpecEntityOperatorUserOperatorResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

// Configuration of the User Operator.
#KafkaSpecEntityOperatorUserOperator: {
	// The image to use for the User Operator.
	image?: null | string @go(Image,*string)

	// JVM Options for pods.
	jvmOptions?: null | #KafkaSpecEntityOperatorUserOperatorJvmOptions @go(JvmOptions,*KafkaSpecEntityOperatorUserOperatorJvmOptions)

	// Pod liveness checking.
	livenessProbe?: null | #KafkaSpecEntityOperatorUserOperatorLivenessProbe @go(LivenessProbe,*KafkaSpecEntityOperatorUserOperatorLivenessProbe)

	// Logging configuration.
	logging?: null | #KafkaSpecEntityOperatorUserOperatorLogging @go(Logging,*KafkaSpecEntityOperatorUserOperatorLogging)

	// Pod readiness checking.
	readinessProbe?: null | #KafkaSpecEntityOperatorUserOperatorReadinessProbe @go(ReadinessProbe,*KafkaSpecEntityOperatorUserOperatorReadinessProbe)

	// Interval between periodic reconciliations.
	reconciliationIntervalSeconds?: null | int32 @go(ReconciliationIntervalSeconds,*int32)

	// CPU and memory resources to reserve.
	resources?: null | #KafkaSpecEntityOperatorUserOperatorResources @go(Resources,*KafkaSpecEntityOperatorUserOperatorResources)

	// The prefix that will be added to the KafkaUser name to be used as the Secret
	// name.
	secretPrefix?: null | string @go(SecretPrefix,*string)

	// The namespace the User Operator should watch.
	watchedNamespace?: null | string @go(WatchedNamespace,*string)

	// Timeout for the ZooKeeper session.
	zookeeperSessionTimeoutSeconds?: null | int32 @go(ZookeeperSessionTimeoutSeconds,*int32)
}

// Configuration of the Entity Operator.
#KafkaSpecEntityOperator: {
	// Template for Entity Operator resources. The template allows users to specify
	// how a `Deployment` and `Pod` is generated.
	template?: null | #KafkaSpecEntityOperatorTemplate @go(Template,*KafkaSpecEntityOperatorTemplate)

	// TLS sidecar configuration.
	tlsSidecar?: null | #KafkaSpecEntityOperatorTlsSidecar @go(TlsSidecar,*KafkaSpecEntityOperatorTlsSidecar)

	// Configuration of the Topic Operator.
	topicOperator?: null | #KafkaSpecEntityOperatorTopicOperator @go(TopicOperator,*KafkaSpecEntityOperatorTopicOperator)

	// Configuration of the User Operator.
	userOperator?: null | #KafkaSpecEntityOperatorUserOperator @go(UserOperator,*KafkaSpecEntityOperatorUserOperator)
}

#KafkaSpecJmxTransKafkaQueriesElem: _

#KafkaSpecJmxTransOutputDefinitionsElem: _

#KafkaSpecJmxTransResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// CPU and memory resources to reserve.
#KafkaSpecJmxTransResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecJmxTransResourcesClaimsElem] @go(Claims,[]KafkaSpecJmxTransResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

#KafkaSpecJmxTransTemplateContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

#KafkaSpecJmxTransTemplateContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecJmxTransTemplateContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecJmxTransTemplateContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecJmxTransTemplateContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Security context for the container.
#KafkaSpecJmxTransTemplateContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecJmxTransTemplateContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecJmxTransTemplateContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecJmxTransTemplateContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecJmxTransTemplateContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecJmxTransTemplateContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecJmxTransTemplateContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecJmxTransTemplateContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecJmxTransTemplateContainerSecurityContextWindowsOptions)
}

// Template for JmxTrans container.
#KafkaSpecJmxTransTemplateContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecJmxTransTemplateContainerEnvElem] @go(Env,[]KafkaSpecJmxTransTemplateContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecJmxTransTemplateContainerSecurityContext @go(SecurityContext,*KafkaSpecJmxTransTemplateContainerSecurityContext)
}

#KafkaSpecJmxTransTemplateDeploymentDeploymentStrategy: _ // #enumKafkaSpecJmxTransTemplateDeploymentDeploymentStrategy

#enumKafkaSpecJmxTransTemplateDeploymentDeploymentStrategy:
	#KafkaSpecJmxTransTemplateDeploymentDeploymentStrategyRollingUpdate |
	#KafkaSpecJmxTransTemplateDeploymentDeploymentStrategyRecreate

#KafkaSpecJmxTransTemplateDeploymentDeploymentStrategyRollingUpdate: #KafkaSpecJmxTransTemplateDeploymentDeploymentStrategy & "RollingUpdate"

#KafkaSpecJmxTransTemplateDeploymentDeploymentStrategyRecreate: #KafkaSpecJmxTransTemplateDeploymentDeploymentStrategy & "Recreate"

// Annotations added to the Kubernetes resource.
#KafkaSpecJmxTransTemplateDeploymentMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecJmxTransTemplateDeploymentMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecJmxTransTemplateDeploymentMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecJmxTransTemplateDeploymentMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecJmxTransTemplateDeploymentMetadataLabels @go(Labels)
}

// Template for JmxTrans `Deployment`.
#KafkaSpecJmxTransTemplateDeployment: {
	// Pod replacement strategy for deployment configuration changes. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	deploymentStrategy?: null | #KafkaSpecJmxTransTemplateDeploymentDeploymentStrategy @go(DeploymentStrategy,*KafkaSpecJmxTransTemplateDeploymentDeploymentStrategy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecJmxTransTemplateDeploymentMetadata @go(Metadata,*KafkaSpecJmxTransTemplateDeploymentMetadata)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaSpecJmxTransTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecJmxTransTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaSpecJmxTransTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecJmxTransTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecJmxTransTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

// The pod's affinity rules.
#KafkaSpecJmxTransTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaSpecJmxTransTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaSpecJmxTransTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaSpecJmxTransTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaSpecJmxTransTemplatePodAffinityPodAntiAffinity)
}

#KafkaSpecJmxTransTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaSpecJmxTransTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecJmxTransTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecJmxTransTemplatePodMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecJmxTransTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecJmxTransTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecJmxTransTemplatePodMetadataLabels @go(Labels)
}

#KafkaSpecJmxTransTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecJmxTransTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecJmxTransTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecJmxTransTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Configures pod-level security attributes and common container settings.
#KafkaSpecJmxTransTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecJmxTransTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecJmxTransTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecJmxTransTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecJmxTransTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaSpecJmxTransTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaSpecJmxTransTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecJmxTransTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecJmxTransTemplatePodSecurityContextWindowsOptions)
}

#KafkaSpecJmxTransTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

// Template for JmxTrans `Pods`.
#KafkaSpecJmxTransTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaSpecJmxTransTemplatePodAffinity @go(Affinity,*KafkaSpecJmxTransTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaSpecJmxTransTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaSpecJmxTransTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaSpecJmxTransTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaSpecJmxTransTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecJmxTransTemplatePodMetadata @go(Metadata,*KafkaSpecJmxTransTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaSpecJmxTransTemplatePodSecurityContext @go(SecurityContext,*KafkaSpecJmxTransTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaSpecJmxTransTemplatePodTolerationsElem] @go(Tolerations,[]KafkaSpecJmxTransTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaSpecJmxTransTemplatePodTopologySpreadConstraintsElem)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecJmxTransTemplateServiceAccountMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecJmxTransTemplateServiceAccountMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecJmxTransTemplateServiceAccountMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecJmxTransTemplateServiceAccountMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecJmxTransTemplateServiceAccountMetadataLabels @go(Labels)
}

// Template for the JmxTrans service account.
#KafkaSpecJmxTransTemplateServiceAccount: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecJmxTransTemplateServiceAccountMetadata @go(Metadata,*KafkaSpecJmxTransTemplateServiceAccountMetadata)
}

// Template for JmxTrans resources.
#KafkaSpecJmxTransTemplate: {
	// Template for JmxTrans container.
	container?: null | #KafkaSpecJmxTransTemplateContainer @go(Container,*KafkaSpecJmxTransTemplateContainer)

	// Template for JmxTrans `Deployment`.
	deployment?: null | #KafkaSpecJmxTransTemplateDeployment @go(Deployment,*KafkaSpecJmxTransTemplateDeployment)

	// Template for JmxTrans `Pods`.
	pod?: null | #KafkaSpecJmxTransTemplatePod @go(Pod,*KafkaSpecJmxTransTemplatePod)

	// Template for the JmxTrans service account.
	serviceAccount?: null | #KafkaSpecJmxTransTemplateServiceAccount @go(ServiceAccount,*KafkaSpecJmxTransTemplateServiceAccount)
}

// As of Strimzi 0.35.0, JMXTrans is not supported anymore and this option is
// ignored.
#KafkaSpecJmxTrans: _

#KafkaSpecKafkaAuthorizationTlsTrustedCertificatesElem: _

#KafkaSpecKafkaAuthorizationType: _ // #enumKafkaSpecKafkaAuthorizationType

#enumKafkaSpecKafkaAuthorizationType:
	#KafkaSpecKafkaAuthorizationTypeSimple |
	#KafkaSpecKafkaAuthorizationTypeOpa |
	#KafkaSpecKafkaAuthorizationTypeKeycloak |
	#KafkaSpecKafkaAuthorizationTypeCustom

#KafkaSpecKafkaAuthorizationTypeSimple: #KafkaSpecKafkaAuthorizationType & "simple"

#KafkaSpecKafkaAuthorizationTypeOpa: #KafkaSpecKafkaAuthorizationType & "opa"

#KafkaSpecKafkaAuthorizationTypeKeycloak: #KafkaSpecKafkaAuthorizationType & "keycloak"

#KafkaSpecKafkaAuthorizationTypeCustom: #KafkaSpecKafkaAuthorizationType & "custom"

// Authorization configuration for Kafka brokers.
#KafkaSpecKafkaAuthorization: _

// Configuration of the Kafka Exporter. Kafka Exporter can provide additional
// metrics, for example lag of consumer group at topic/partition.
#KafkaSpecKafkaExporter: {
	// Enable Sarama logging, a Go client library used by the Kafka Exporter.
	enableSaramaLogging?: null | bool @go(EnableSaramaLogging,*bool)

	// Regular expression to specify which consumer groups to exclude.
	groupExcludeRegex?: null | string @go(GroupExcludeRegex,*string)

	// Regular expression to specify which consumer groups to collect. Default value
	// is `.*`.
	groupRegex?: null | string @go(GroupRegex,*string)

	// The container image used for the Kafka Exporter pods. If no image name is
	// explicitly specified, the image name corresponds to the version specified in
	// the Cluster Operator configuration. If an image name is not defined in the
	// Cluster Operator configuration, a default value is used.
	image?: null | string @go(Image,*string)

	// Pod liveness check.
	livenessProbe?: null | #KafkaSpecKafkaExporterLivenessProbe @go(LivenessProbe,*KafkaSpecKafkaExporterLivenessProbe)

	// Only log messages with the given severity or above. Valid levels: [`info`,
	// `debug`, `trace`]. Default log level is `info`.
	logging?: null | string @go(Logging,*string)

	// Pod readiness check.
	readinessProbe?: null | #KafkaSpecKafkaExporterReadinessProbe @go(ReadinessProbe,*KafkaSpecKafkaExporterReadinessProbe)

	// CPU and memory resources to reserve.
	resources?: null | #KafkaSpecKafkaExporterResources @go(Resources,*KafkaSpecKafkaExporterResources)

	// Whether show the offset/lag for all consumer group, otherwise, only show
	// connected consumer groups.
	showAllOffsets?: null | bool @go(ShowAllOffsets,*bool)

	// Customization of deployment templates and pods.
	template?: null | #KafkaSpecKafkaExporterTemplate @go(Template,*KafkaSpecKafkaExporterTemplate)

	// Regular expression to specify which topics to exclude.
	topicExcludeRegex?: null | string @go(TopicExcludeRegex,*string)

	// Regular expression to specify which topics to collect. Default value is `.*`.
	topicRegex?: null | string @go(TopicRegex,*string)
}

// Customization of deployment templates and pods.
#KafkaSpecKafkaExporterTemplate: {
	// Template for the Kafka Exporter container.
	container?: null | #KafkaSpecKafkaExporterTemplateContainer @go(Container,*KafkaSpecKafkaExporterTemplateContainer)

	// Template for Kafka Exporter `Deployment`.
	deployment?: null | #KafkaSpecKafkaExporterTemplateDeployment @go(Deployment,*KafkaSpecKafkaExporterTemplateDeployment)

	// Template for Kafka Exporter `Pods`.
	pod?: null | #KafkaSpecKafkaExporterTemplatePod @go(Pod,*KafkaSpecKafkaExporterTemplatePod)

	// Template for Kafka Exporter `Service`.
	service?: null | #KafkaSpecKafkaExporterTemplateService @go(Service,*KafkaSpecKafkaExporterTemplateService)

	// Template for the Kafka Exporter service account.
	serviceAccount?: null | #KafkaSpecKafkaExporterTemplateServiceAccount @go(ServiceAccount,*KafkaSpecKafkaExporterTemplateServiceAccount)
}

// Template for Kafka Exporter `Pods`.
#KafkaSpecKafkaExporterTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaSpecKafkaExporterTemplatePodAffinity @go(Affinity,*KafkaSpecKafkaExporterTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaSpecKafkaExporterTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaSpecKafkaExporterTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaSpecKafkaExporterTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaSpecKafkaExporterTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaExporterTemplatePodMetadata @go(Metadata,*KafkaSpecKafkaExporterTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaSpecKafkaExporterTemplatePodSecurityContext @go(SecurityContext,*KafkaSpecKafkaExporterTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaSpecKafkaExporterTemplatePodTolerationsElem] @go(Tolerations,[]KafkaSpecKafkaExporterTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElem)
}

// The pod's affinity rules.
#KafkaSpecKafkaExporterTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinity)
}

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecClientsCaCertificateExpirationPolicy: _ // #enumKafkaSpecClientsCaCertificateExpirationPolicy

#enumKafkaSpecClientsCaCertificateExpirationPolicy:
	#KafkaSpecClientsCaCertificateExpirationPolicyRenewCertificate |
	#KafkaSpecClientsCaCertificateExpirationPolicyReplaceKey

// Template for Kafka Exporter `Deployment`.
#KafkaSpecKafkaExporterTemplateDeployment: {
	// Pod replacement strategy for deployment configuration changes. Valid values are
	// `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
	deploymentStrategy?: null | #KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategy @go(DeploymentStrategy,*KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaExporterTemplateDeploymentMetadata @go(Metadata,*KafkaSpecKafkaExporterTemplateDeploymentMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaExporterTemplateDeploymentMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaExporterTemplateDeploymentMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaExporterTemplateDeploymentMetadataLabels @go(Labels)
}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaExporterTemplateDeploymentMetadataLabels: {[string]: string}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaExporterTemplateDeploymentMetadataAnnotations: {[string]: string}

#KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategyRecreate: #KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategy & "Recreate"

#KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategyRollingUpdate: #KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategy & "RollingUpdate"

#KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategy: _ // #enumKafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategy

#enumKafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategy:
	#KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategyRecreate |
	#KafkaSpecKafkaExporterTemplateDeploymentDeploymentStrategyRollingUpdate

// Template for the Kafka Exporter container.
#KafkaSpecKafkaExporterTemplateContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecKafkaExporterTemplateContainerEnvElem] @go(Env,[]KafkaSpecKafkaExporterTemplateContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecKafkaExporterTemplateContainerSecurityContext @go(SecurityContext,*KafkaSpecKafkaExporterTemplateContainerSecurityContext)
}

// Security context for the container.
#KafkaSpecKafkaExporterTemplateContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecKafkaExporterTemplateContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecKafkaExporterTemplateContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecKafkaExporterTemplateContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecKafkaExporterTemplateContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecKafkaExporterTemplateContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecKafkaExporterTemplateContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecKafkaExporterTemplateContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecKafkaExporterTemplateContainerSecurityContextWindowsOptions)
}

#KafkaSpecKafkaExporterTemplateContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

#KafkaSpecKafkaExporterTemplateContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecKafkaExporterTemplateContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecKafkaExporterTemplateContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecKafkaExporterTemplateContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// CPU and memory resources to reserve.
#KafkaSpecKafkaExporterResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecKafkaExporterResourcesClaimsElem] @go(Claims,[]KafkaSpecKafkaExporterResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

#KafkaSpecKafkaExporterResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Pod readiness check.
#KafkaSpecKafkaExporterReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// Pod liveness check.
#KafkaSpecKafkaExporterLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// Configuration of the Kafka cluster.
#KafkaSpecKafka: _

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecKafkaExporterTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaSpecKafkaExporterTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Metadata applied to the resource.
#KafkaSpecKafkaExporterTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaExporterTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaExporterTemplatePodMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaExporterTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaExporterTemplatePodMetadataLabels: {[string]: string}

// Configures pod-level security attributes and common container settings.
#KafkaSpecKafkaExporterTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecKafkaExporterTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecKafkaExporterTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecKafkaExporterTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecKafkaExporterTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaSpecKafkaExporterTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaSpecKafkaExporterTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecKafkaExporterTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecKafkaExporterTemplatePodSecurityContextWindowsOptions)
}

#KafkaSpecKafkaExporterTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecKafkaExporterTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecKafkaExporterTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecKafkaExporterTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

#KafkaSpecKafkaExporterTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

#KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaExporterTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

// Template for Kafka Exporter `Service`.
#KafkaSpecKafkaExporterTemplateService: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaExporterTemplateServiceMetadata @go(Metadata,*KafkaSpecKafkaExporterTemplateServiceMetadata)
}

// Template for the Kafka Exporter service account.
#KafkaSpecKafkaExporterTemplateServiceAccount: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaExporterTemplateServiceAccountMetadata @go(Metadata,*KafkaSpecKafkaExporterTemplateServiceAccountMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaExporterTemplateServiceAccountMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaExporterTemplateServiceAccountMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaExporterTemplateServiceAccountMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaExporterTemplateServiceAccountMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaExporterTemplateServiceAccountMetadataLabels: {[string]: string}

// Metadata applied to the resource.
#KafkaSpecKafkaExporterTemplateServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaExporterTemplateServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaExporterTemplateServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaExporterTemplateServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaExporterTemplateServiceMetadataLabels: {[string]: string}

// JMX Options for Kafka brokers.
#KafkaSpecKafkaJmxOptions: {
	// Authentication configuration for connecting to the JMX port.
	authentication?: null | #KafkaSpecKafkaJmxOptionsAuthentication @go(Authentication,*KafkaSpecKafkaJmxOptionsAuthentication)
}

// Authentication configuration for connecting to the JMX port.
#KafkaSpecKafkaJmxOptionsAuthentication: _

#KafkaSpecKafkaJmxOptionsAuthenticationType: _ // #enumKafkaSpecKafkaJmxOptionsAuthenticationType

#enumKafkaSpecKafkaJmxOptionsAuthenticationType:
	#KafkaSpecKafkaJmxOptionsAuthenticationTypePassword

#KafkaSpecKafkaJmxOptionsAuthenticationTypePassword: #KafkaSpecKafkaJmxOptionsAuthenticationType & "password"

// JVM Options for pods.
#KafkaSpecKafkaJvmOptions: {
	// A map of -XX options to the JVM.
	"-XX"?: #KafkaSpecKafkaJvmOptionsXX @go(XX)

	// -Xms option to to the JVM.
	"-Xms"?: null | string @go(Xms,*string)

	// -Xmx option to to the JVM.
	"-Xmx"?: null | string @go(Xmx,*string)

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	gcLoggingEnabled?: null | bool @go(GcLoggingEnabled,*bool)

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	javaSystemProperties?: [...#KafkaSpecKafkaJvmOptionsJavaSystemPropertiesElem] @go(JavaSystemProperties,[]KafkaSpecKafkaJvmOptionsJavaSystemPropertiesElem)
}

#KafkaSpecKafkaJvmOptionsJavaSystemPropertiesElem: {
	// The system property name.
	name?: null | string @go(Name,*string)

	// The system property value.
	value?: null | string @go(Value,*string)
}

// A map of -XX options to the JVM.
#KafkaSpecKafkaJvmOptionsXX: {[string]: string}

#KafkaSpecKafkaListenersElem: _

// Authentication configuration for this listener.
#KafkaSpecKafkaListenersElemAuthentication: _

// Link to Kubernetes Secret containing the OAuth client secret which the Kafka
// broker can use to authenticate against the authorization server and use the
// introspect endpoint URI.
#KafkaSpecKafkaListenersElemAuthenticationClientSecret: _

#KafkaSpecKafkaListenersElemAuthenticationSecretsElem: _

#KafkaSpecKafkaListenersElemAuthenticationTlsTrustedCertificatesElem: _

#KafkaSpecKafkaListenersElemAuthenticationType: _ // #enumKafkaSpecKafkaListenersElemAuthenticationType

#enumKafkaSpecKafkaListenersElemAuthenticationType:
	#KafkaSpecKafkaListenersElemAuthenticationTypeCustom |
	#KafkaSpecKafkaListenersElemAuthenticationTypeOauth |
	#KafkaSpecKafkaListenersElemAuthenticationTypeScramSha512 |
	#KafkaSpecKafkaListenersElemAuthenticationTypeTls

#KafkaSpecKafkaListenersElemAuthenticationTypeCustom: #KafkaSpecKafkaListenersElemAuthenticationType & "custom"

#KafkaSpecKafkaListenersElemAuthenticationTypeOauth: #KafkaSpecKafkaListenersElemAuthenticationType & "oauth"

#KafkaSpecKafkaListenersElemAuthenticationTypeScramSha512: #KafkaSpecKafkaListenersElemAuthenticationType & "scram-sha-512"

#KafkaSpecKafkaListenersElemAuthenticationTypeTls: #KafkaSpecKafkaListenersElemAuthenticationType & "tls"

// Additional listener configuration.
#KafkaSpecKafkaListenersElemConfiguration: {
	// Bootstrap configuration.
	bootstrap?: null | #KafkaSpecKafkaListenersElemConfigurationBootstrap @go(Bootstrap,*KafkaSpecKafkaListenersElemConfigurationBootstrap)

	// Reference to the `Secret` which holds the certificate and private key pair
	// which will be used for this listener. The certificate can optionally contain
	// the whole chain. This field can be used only with listeners with enabled TLS
	// encryption.
	brokerCertChainAndKey?: null | #KafkaSpecKafkaListenersElemConfigurationBrokerCertChainAndKey @go(BrokerCertChainAndKey,*KafkaSpecKafkaListenersElemConfigurationBrokerCertChainAndKey)

	// Per-broker configurations.
	brokers?: [...#KafkaSpecKafkaListenersElemConfigurationBrokersElem] @go(Brokers,[]KafkaSpecKafkaListenersElemConfigurationBrokersElem)

	// Configures a specific class for `Ingress` and `LoadBalancer` that defines which
	// controller will be used. This field can only be used with `ingress` and
	// `loadbalancer` type listeners. If not specified, the default controller is
	// used. For an `ingress` listener, set the `ingressClassName` property in the
	// `Ingress` resources. For a `loadbalancer` listener, set the `loadBalancerClass`
	// property  in the `Service` resources.
	class?: null | string @go(Class,*string)

	// Whether to create the bootstrap service or not. The bootstrap service is
	// created by default (if not specified differently). This field can be used with
	// the `loadBalancer` type listener.
	createBootstrapService?: null | bool @go(CreateBootstrapService,*bool)

	// Specifies whether the service routes external traffic to node-local or
	// cluster-wide endpoints. `Cluster` may cause a second hop to another node and
	// obscures the client source IP. `Local` avoids a second hop for LoadBalancer and
	// Nodeport type services and preserves the client source IP (when supported by
	// the infrastructure). If unspecified, Kubernetes will use `Cluster` as the
	// default.This field can be used only with `loadbalancer` or `nodeport` type
	// listener.
	externalTrafficPolicy?: null | #KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy @go(ExternalTrafficPolicy,*KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy)

	// A list of finalizers which will be configured for the `LoadBalancer` type
	// Services created for this listener. If supported by the platform, the finalizer
	// `service.kubernetes.io/load-balancer-cleanup` to make sure that the external
	// load balancer is deleted together with the service.For more information, see
	// https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#garbage-collecting-load-balancers.
	// This field can be used only with `loadbalancer` type listeners.
	finalizers?: [...string] @go(Finalizers,[]string)

	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	ipFamilies?: [...#KafkaSpecKafkaListenersElemConfigurationIpFamiliesElem] @go(IpFamilies,[]KafkaSpecKafkaListenersElemConfigurationIpFamiliesElem)

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	ipFamilyPolicy?: null | #KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicy @go(IpFamilyPolicy,*KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicy)

	// A list of CIDR ranges (for example `10.0.0.0/8` or `130.211.204.1/32`) from
	// which clients can connect to load balancer type listeners. If supported by the
	// platform, traffic through the loadbalancer is restricted to the specified CIDR
	// ranges. This field is applicable only for loadbalancer type services and is
	// ignored if the cloud provider does not support the feature. This field can be
	// used only with `loadbalancer` type listener.
	loadBalancerSourceRanges?: [...string] @go(LoadBalancerSourceRanges,[]string)

	// The maximum connection creation rate we allow in this listener at any time. New
	// connections will be throttled if the limit is reached.
	maxConnectionCreationRate?: null | int32 @go(MaxConnectionCreationRate,*int32)

	// The maximum number of connections we allow for this listener in the broker at
	// any time. New connections are blocked if the limit is reached.
	maxConnections?: null | int32 @go(MaxConnections,*int32)

	// Defines which address type should be used as the node address. Available types
	// are: `ExternalDNS`, `ExternalIP`, `InternalDNS`, `InternalIP` and `Hostname`.
	// By default, the addresses will be used in the following order (the first one
	// found will be used):
	//
	// * `ExternalDNS`
	// * `ExternalIP`
	// * `InternalDNS`
	// * `InternalIP`
	// * `Hostname`
	//
	// This field is used to select the preferred address type, which is checked
	// first. If no address is found for this address type, the other types are
	// checked in the default order. This field can only be used with `nodeport` type
	// listener.
	preferredNodePortAddressType?: null | #KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType @go(PreferredNodePortAddressType,*KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType)

	// Configures whether the Kubernetes service DNS domain should be used or not. If
	// set to `true`, the generated addresses will contain the service DNS domain
	// suffix (by default `.cluster.local`, can be configured using environment
	// variable `KUBERNETES_SERVICE_DNS_DOMAIN`). Defaults to `false`.This field can
	// be used only with `internal` and `cluster-ip` type listeners.
	useServiceDnsDomain?: null | bool @go(UseServiceDnsDomain,*bool)
}

// Bootstrap configuration.
#KafkaSpecKafkaListenersElemConfigurationBootstrap: {
	// Additional alternative names for the bootstrap service. The alternative names
	// will be added to the list of subject alternative names of the TLS certificates.
	alternativeNames?: [...string] @go(AlternativeNames,[]string)

	// Annotations that will be added to the `Ingress`, `Route`, or `Service`
	// resource. You can use this field to configure DNS providers such as External
	// DNS. This field can be used only with `loadbalancer`, `nodeport`, `route`, or
	// `ingress` type listeners.
	annotations?: #KafkaSpecKafkaListenersElemConfigurationBootstrapAnnotations @go(Annotations)

	// The bootstrap host. This field will be used in the Ingress resource or in the
	// Route resource to specify the desired hostname. This field can be used only
	// with `route` (optional) or `ingress` (required) type listeners.
	host?: null | string @go(Host,*string)

	// Labels that will be added to the `Ingress`, `Route`, or `Service` resource.
	// This field can be used only with `loadbalancer`, `nodeport`, `route`, or
	// `ingress` type listeners.
	labels?: #KafkaSpecKafkaListenersElemConfigurationBootstrapLabels @go(Labels)

	// The loadbalancer is requested with the IP address specified in this field. This
	// feature depends on whether the underlying cloud provider supports specifying
	// the `loadBalancerIP` when a load balancer is created. This field is ignored if
	// the cloud provider does not support the feature.This field can be used only
	// with `loadbalancer` type listener.
	loadBalancerIP?: null | string @go(LoadBalancerIP,*string)

	// Node port for the bootstrap service. This field can be used only with
	// `nodeport` type listener.
	nodePort?: null | int32 @go(NodePort,*int32)
}

// Annotations that will be added to the `Ingress`, `Route`, or `Service` resource.
// You can use this field to configure DNS providers such as External DNS. This
// field can be used only with `loadbalancer`, `nodeport`, `route`, or `ingress`
// type listeners.
#KafkaSpecKafkaListenersElemConfigurationBootstrapAnnotations: {[string]: string}

// Labels that will be added to the `Ingress`, `Route`, or `Service` resource. This
// field can be used only with `loadbalancer`, `nodeport`, `route`, or `ingress`
// type listeners.
#KafkaSpecKafkaListenersElemConfigurationBootstrapLabels: {[string]: string}

// Reference to the `Secret` which holds the certificate and private key pair which
// will be used for this listener. The certificate can optionally contain the whole
// chain. This field can be used only with listeners with enabled TLS encryption.
#KafkaSpecKafkaListenersElemConfigurationBrokerCertChainAndKey: _

#KafkaSpecKafkaListenersElemConfigurationBrokersElem: _

// Annotations that will be added to the `Ingress` or `Service` resource. You can
// use this field to configure DNS providers such as External DNS. This field can
// be used only with `loadbalancer`, `nodeport`, or `ingress` type listeners.
#KafkaSpecKafkaListenersElemConfigurationBrokersElemAnnotations: {[string]: string}

// Labels that will be added to the `Ingress`, `Route`, or `Service` resource. This
// field can be used only with `loadbalancer`, `nodeport`, `route`, or `ingress`
// type listeners.
#KafkaSpecKafkaListenersElemConfigurationBrokersElemLabels: {[string]: string}

#KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy: _ // #enumKafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy

#enumKafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy:
	#KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicyCluster |
	#KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicyLocal

#KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicyCluster: #KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy & "Cluster"

#KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicyLocal: #KafkaSpecKafkaListenersElemConfigurationExternalTrafficPolicy & "Local"

#KafkaSpecKafkaListenersElemConfigurationIpFamiliesElem: _ // #enumKafkaSpecKafkaListenersElemConfigurationIpFamiliesElem

#enumKafkaSpecKafkaListenersElemConfigurationIpFamiliesElem:
	#KafkaSpecKafkaListenersElemConfigurationIpFamiliesElemIPv4 |
	#KafkaSpecKafkaListenersElemConfigurationIpFamiliesElemIPv6

#KafkaSpecKafkaListenersElemConfigurationIpFamiliesElemIPv4: #KafkaSpecKafkaListenersElemConfigurationIpFamiliesElem & "IPv4"

#KafkaSpecKafkaListenersElemConfigurationIpFamiliesElemIPv6: #KafkaSpecKafkaListenersElemConfigurationIpFamiliesElem & "IPv6"

#KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicy: _ // #enumKafkaSpecKafkaListenersElemConfigurationIpFamilyPolicy

#enumKafkaSpecKafkaListenersElemConfigurationIpFamilyPolicy:
	#KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicyPreferDualStack |
	#KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicyRequireDualStack |
	#KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicySingleStack

#KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicyPreferDualStack: #KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicy & "PreferDualStack"

#KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicyRequireDualStack: #KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicy & "RequireDualStack"

#KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicySingleStack: #KafkaSpecKafkaListenersElemConfigurationIpFamilyPolicy & "SingleStack"

#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType: _ // #enumKafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType

#enumKafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType:
	#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeExternalDNS |
	#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeExternalIP |
	#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeHostname |
	#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeInternalDNS |
	#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeInternalIP

#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeExternalDNS: #KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType & "ExternalDNS"

#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeExternalIP: #KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType & "ExternalIP"

#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeHostname: #KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType & "Hostname"

#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeInternalDNS: #KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType & "InternalDNS"

#KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressTypeInternalIP: #KafkaSpecKafkaListenersElemConfigurationPreferredNodePortAddressType & "InternalIP"

#KafkaSpecKafkaListenersElemNetworkPolicyPeersElem: {
	// IpBlock corresponds to the JSON schema field "ipBlock".
	ipBlock?: null | #KafkaSpecKafkaListenersElemNetworkPolicyPeersElemIpBlock @go(IpBlock,*KafkaSpecKafkaListenersElemNetworkPolicyPeersElemIpBlock)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelector)

	// PodSelector corresponds to the JSON schema field "podSelector".
	podSelector?: null | #KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelector @go(PodSelector,*KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelector)
}

#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemIpBlock: {
	// Cidr corresponds to the JSON schema field "cidr".
	cidr?: null | string @go(Cidr,*string)

	// Except corresponds to the JSON schema field "except".
	except?: [...string] @go(Except,[]string)
}

#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaListenersElemNetworkPolicyPeersElemPodSelectorMatchLabels: [string]: string

#KafkaSpecKafkaListenersElemType: _ // #enumKafkaSpecKafkaListenersElemType

#enumKafkaSpecKafkaListenersElemType:
	#KafkaSpecKafkaListenersElemTypeClusterIp |
	#KafkaSpecKafkaListenersElemTypeIngress |
	#KafkaSpecKafkaListenersElemTypeInternal |
	#KafkaSpecKafkaListenersElemTypeLoadbalancer |
	#KafkaSpecKafkaListenersElemTypeNodeport |
	#KafkaSpecKafkaListenersElemTypeRoute

#KafkaSpecKafkaListenersElemTypeClusterIp: #KafkaSpecKafkaListenersElemType & "cluster-ip"

#KafkaSpecKafkaListenersElemTypeIngress: #KafkaSpecKafkaListenersElemType & "ingress"

#KafkaSpecKafkaListenersElemTypeInternal: #KafkaSpecKafkaListenersElemType & "internal"

#KafkaSpecKafkaListenersElemTypeLoadbalancer: #KafkaSpecKafkaListenersElemType & "loadbalancer"

#KafkaSpecKafkaListenersElemTypeNodeport: #KafkaSpecKafkaListenersElemType & "nodeport"

#KafkaSpecKafkaListenersElemTypeRoute: #KafkaSpecKafkaListenersElemType & "route"

// Pod liveness checking.
#KafkaSpecKafkaLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// Logging configuration for Kafka.
#KafkaSpecKafkaLogging: _

// A Map from logger name to logger level.
#KafkaSpecKafkaLoggingLoggers: {[string]: string}

#KafkaSpecKafkaLoggingType: _ // #enumKafkaSpecKafkaLoggingType

#enumKafkaSpecKafkaLoggingType:
	#KafkaSpecKafkaLoggingTypeExternal |
	#KafkaSpecKafkaLoggingTypeInline

#KafkaSpecKafkaLoggingTypeExternal: #KafkaSpecKafkaLoggingType & "external"

#KafkaSpecKafkaLoggingTypeInline: #KafkaSpecKafkaLoggingType & "inline"

// `ConfigMap` entry where the logging configuration is stored.
#KafkaSpecKafkaLoggingValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaSpecKafkaLoggingValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaSpecKafkaLoggingValueFromConfigMapKeyRef)
}

// Reference to the key in the ConfigMap containing the configuration.
#KafkaSpecKafkaLoggingValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// Metrics configuration.
#KafkaSpecKafkaMetricsConfig: _

#KafkaSpecKafkaMetricsConfigType: _ // #enumKafkaSpecKafkaMetricsConfigType

#enumKafkaSpecKafkaMetricsConfigType:
	#KafkaSpecKafkaMetricsConfigTypeJmxPrometheusExporter

#KafkaSpecKafkaMetricsConfigTypeJmxPrometheusExporter: #KafkaSpecKafkaMetricsConfigType & "jmxPrometheusExporter"

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
#KafkaSpecKafkaMetricsConfigValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaSpecKafkaMetricsConfigValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaSpecKafkaMetricsConfigValueFromConfigMapKeyRef)
}

// Reference to the key in the ConfigMap containing the configuration.
#KafkaSpecKafkaMetricsConfigValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// Configuration of the `broker.rack` broker config.
#KafkaSpecKafkaRack: _

// Pod readiness checking.
#KafkaSpecKafkaReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// CPU and memory resources to reserve.
#KafkaSpecKafkaResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecKafkaResourcesClaimsElem] @go(Claims,[]KafkaSpecKafkaResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

#KafkaSpecKafkaResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Storage configuration (disk). Cannot be updated. This property is required when
// node pools are not used.
#KafkaSpecKafkaStorage: _

#KafkaSpecKafkaStorageOverridesElem: {
	// Id of the kafka broker (broker identifier).
	broker?: null | int32 @go(Broker,*int32)

	// The storage class to use for dynamic volume allocation for this broker.
	class?: null | string @go(Class,*string)
}

// Specifies a specific persistent volume to use. It contains key:value pairs
// representing labels for selecting such a volume.
#KafkaSpecKafkaStorageSelector: {[string]: string}

#KafkaSpecKafkaStorageType: _ // #enumKafkaSpecKafkaStorageType

#enumKafkaSpecKafkaStorageType:
	#KafkaSpecKafkaStorageTypeEphemeral |
	#KafkaSpecKafkaStorageTypeJbod |
	#KafkaSpecKafkaStorageTypePersistentClaim

#KafkaSpecKafkaStorageTypeEphemeral: #KafkaSpecKafkaStorageType & "ephemeral"

#KafkaSpecKafkaStorageTypeJbod: #KafkaSpecKafkaStorageType & "jbod"

#KafkaSpecKafkaStorageTypePersistentClaim: #KafkaSpecKafkaStorageType & "persistent-claim"

#KafkaSpecKafkaStorageVolumesElem: _

#KafkaSpecKafkaStorageVolumesElemOverridesElem: {
	// Id of the kafka broker (broker identifier).
	broker?: null | int32 @go(Broker,*int32)

	// The storage class to use for dynamic volume allocation for this broker.
	class?: null | string @go(Class,*string)
}

// Specifies a specific persistent volume to use. It contains key:value pairs
// representing labels for selecting such a volume.
#KafkaSpecKafkaStorageVolumesElemSelector: {[string]: string}

#KafkaSpecKafkaStorageVolumesElemType: _ // #enumKafkaSpecKafkaStorageVolumesElemType

#enumKafkaSpecKafkaStorageVolumesElemType:
	#KafkaSpecKafkaStorageVolumesElemTypeEphemeral |
	#KafkaSpecKafkaStorageVolumesElemTypePersistentClaim

#KafkaSpecKafkaStorageVolumesElemTypeEphemeral: #KafkaSpecKafkaStorageVolumesElemType & "ephemeral"

#KafkaSpecKafkaStorageVolumesElemTypePersistentClaim: #KafkaSpecKafkaStorageVolumesElemType & "persistent-claim"

// Template for Kafka cluster resources. The template allows users to specify how
// the Kubernetes resources are generated.
#KafkaSpecKafkaTemplate: {
	// Template for Kafka bootstrap `Service`.
	bootstrapService?: null | #KafkaSpecKafkaTemplateBootstrapService @go(BootstrapService,*KafkaSpecKafkaTemplateBootstrapService)

	// Template for Kafka broker `Service`.
	brokersService?: null | #KafkaSpecKafkaTemplateBrokersService @go(BrokersService,*KafkaSpecKafkaTemplateBrokersService)

	// Template for Secret with Kafka Cluster certificate public key.
	clusterCaCert?: null | #KafkaSpecKafkaTemplateClusterCaCert @go(ClusterCaCert,*KafkaSpecKafkaTemplateClusterCaCert)

	// Template for the Kafka ClusterRoleBinding.
	clusterRoleBinding?: null | #KafkaSpecKafkaTemplateClusterRoleBinding @go(ClusterRoleBinding,*KafkaSpecKafkaTemplateClusterRoleBinding)

	// Template for Kafka external bootstrap `Ingress`.
	externalBootstrapIngress?: null | #KafkaSpecKafkaTemplateExternalBootstrapIngress @go(ExternalBootstrapIngress,*KafkaSpecKafkaTemplateExternalBootstrapIngress)

	// Template for Kafka external bootstrap `Route`.
	externalBootstrapRoute?: null | #KafkaSpecKafkaTemplateExternalBootstrapRoute @go(ExternalBootstrapRoute,*KafkaSpecKafkaTemplateExternalBootstrapRoute)

	// Template for Kafka external bootstrap `Service`.
	externalBootstrapService?: null | #KafkaSpecKafkaTemplateExternalBootstrapService @go(ExternalBootstrapService,*KafkaSpecKafkaTemplateExternalBootstrapService)

	// Template for the Kafka init container.
	initContainer?: null | #KafkaSpecKafkaTemplateInitContainer @go(InitContainer,*KafkaSpecKafkaTemplateInitContainer)

	// Template for Secret of the Kafka Cluster JMX authentication.
	jmxSecret?: null | #KafkaSpecKafkaTemplateJmxSecret @go(JmxSecret,*KafkaSpecKafkaTemplateJmxSecret)

	// Template for the Kafka broker container.
	kafkaContainer?: null | #KafkaSpecKafkaTemplateKafkaContainer @go(KafkaContainer,*KafkaSpecKafkaTemplateKafkaContainer)

	// Template for Kafka per-pod `Ingress` used for access from outside of
	// Kubernetes.
	perPodIngress?: null | #KafkaSpecKafkaTemplatePerPodIngress @go(PerPodIngress,*KafkaSpecKafkaTemplatePerPodIngress)

	// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
	perPodRoute?: null | #KafkaSpecKafkaTemplatePerPodRoute @go(PerPodRoute,*KafkaSpecKafkaTemplatePerPodRoute)

	// Template for Kafka per-pod `Services` used for access from outside of
	// Kubernetes.
	perPodService?: null | #KafkaSpecKafkaTemplatePerPodService @go(PerPodService,*KafkaSpecKafkaTemplatePerPodService)

	// Template for all Kafka `PersistentVolumeClaims`.
	persistentVolumeClaim?: null | #KafkaSpecKafkaTemplatePersistentVolumeClaim @go(PersistentVolumeClaim,*KafkaSpecKafkaTemplatePersistentVolumeClaim)

	// Template for Kafka `Pods`.
	pod?: null | #KafkaSpecKafkaTemplatePod @go(Pod,*KafkaSpecKafkaTemplatePod)

	// Template for Kafka `PodDisruptionBudget`.
	podDisruptionBudget?: null | #KafkaSpecKafkaTemplatePodDisruptionBudget @go(PodDisruptionBudget,*KafkaSpecKafkaTemplatePodDisruptionBudget)

	// Template for Kafka `StrimziPodSet` resource.
	podSet?: null | #KafkaSpecKafkaTemplatePodSet @go(PodSet,*KafkaSpecKafkaTemplatePodSet)

	// Template for the Kafka service account.
	serviceAccount?: null | #KafkaSpecKafkaTemplateServiceAccount @go(ServiceAccount,*KafkaSpecKafkaTemplateServiceAccount)

	// Template for Kafka `StatefulSet`.
	statefulset?: null | #KafkaSpecKafkaTemplateStatefulset @go(Statefulset,*KafkaSpecKafkaTemplateStatefulset)
}

// Template for Kafka bootstrap `Service`.
#KafkaSpecKafkaTemplateBootstrapService: {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	ipFamilies?: [...#KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElem] @go(IpFamilies,[]KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElem)

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	ipFamilyPolicy?: null | #KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy @go(IpFamilyPolicy,*KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateBootstrapServiceMetadata @go(Metadata,*KafkaSpecKafkaTemplateBootstrapServiceMetadata)
}

#KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElem: _ // #enumKafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElem

#enumKafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElem:
	#KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElemIPv4 |
	#KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElemIPv6

#KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElemIPv4: #KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElem & "IPv4"

#KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElemIPv6: #KafkaSpecKafkaTemplateBootstrapServiceIpFamiliesElem & "IPv6"

#KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy: _ // #enumKafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy

#enumKafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy:
	#KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicyPreferDualStack |
	#KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicyRequireDualStack |
	#KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicySingleStack

#KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicyPreferDualStack: #KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy & "PreferDualStack"

#KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicyRequireDualStack: #KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy & "RequireDualStack"

#KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicySingleStack: #KafkaSpecKafkaTemplateBootstrapServiceIpFamilyPolicy & "SingleStack"

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateBootstrapServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateBootstrapServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateBootstrapServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateBootstrapServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateBootstrapServiceMetadataLabels: {[string]: string}

// Template for Kafka broker `Service`.
#KafkaSpecKafkaTemplateBrokersService: {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	ipFamilies?: [...#KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElem] @go(IpFamilies,[]KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElem)

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	ipFamilyPolicy?: null | #KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy @go(IpFamilyPolicy,*KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateBrokersServiceMetadata @go(Metadata,*KafkaSpecKafkaTemplateBrokersServiceMetadata)
}

#KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElem: _ // #enumKafkaSpecKafkaTemplateBrokersServiceIpFamiliesElem

#enumKafkaSpecKafkaTemplateBrokersServiceIpFamiliesElem:
	#KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElemIPv4 |
	#KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElemIPv6

#KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElemIPv4: #KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElem & "IPv4"

#KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElemIPv6: #KafkaSpecKafkaTemplateBrokersServiceIpFamiliesElem & "IPv6"

#KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy: _ // #enumKafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy

#enumKafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy:
	#KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicyPreferDualStack |
	#KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicyRequireDualStack |
	#KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicySingleStack

#KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicyPreferDualStack: #KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy & "PreferDualStack"

#KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicyRequireDualStack: #KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy & "RequireDualStack"

#KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicySingleStack: #KafkaSpecKafkaTemplateBrokersServiceIpFamilyPolicy & "SingleStack"

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateBrokersServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateBrokersServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateBrokersServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateBrokersServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateBrokersServiceMetadataLabels: {[string]: string}

// Template for Secret with Kafka Cluster certificate public key.
#KafkaSpecKafkaTemplateClusterCaCert: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateClusterCaCertMetadata @go(Metadata,*KafkaSpecKafkaTemplateClusterCaCertMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateClusterCaCertMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateClusterCaCertMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateClusterCaCertMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateClusterCaCertMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateClusterCaCertMetadataLabels: {[string]: string}

// Template for the Kafka ClusterRoleBinding.
#KafkaSpecKafkaTemplateClusterRoleBinding: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateClusterRoleBindingMetadata @go(Metadata,*KafkaSpecKafkaTemplateClusterRoleBindingMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateClusterRoleBindingMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateClusterRoleBindingMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateClusterRoleBindingMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateClusterRoleBindingMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateClusterRoleBindingMetadataLabels: {[string]: string}

// Template for Kafka external bootstrap `Ingress`.
#KafkaSpecKafkaTemplateExternalBootstrapIngress: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateExternalBootstrapIngressMetadata @go(Metadata,*KafkaSpecKafkaTemplateExternalBootstrapIngressMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateExternalBootstrapIngressMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateExternalBootstrapIngressMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateExternalBootstrapIngressMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateExternalBootstrapIngressMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateExternalBootstrapIngressMetadataLabels: {[string]: string}

// Template for Kafka external bootstrap `Route`.
#KafkaSpecKafkaTemplateExternalBootstrapRoute: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateExternalBootstrapRouteMetadata @go(Metadata,*KafkaSpecKafkaTemplateExternalBootstrapRouteMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateExternalBootstrapRouteMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateExternalBootstrapRouteMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateExternalBootstrapRouteMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateExternalBootstrapRouteMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateExternalBootstrapRouteMetadataLabels: {[string]: string}

// Template for Kafka external bootstrap `Service`.
#KafkaSpecKafkaTemplateExternalBootstrapService: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateExternalBootstrapServiceMetadata @go(Metadata,*KafkaSpecKafkaTemplateExternalBootstrapServiceMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateExternalBootstrapServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateExternalBootstrapServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateExternalBootstrapServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateExternalBootstrapServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateExternalBootstrapServiceMetadataLabels: {[string]: string}

// Template for the Kafka init container.
#KafkaSpecKafkaTemplateInitContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecKafkaTemplateInitContainerEnvElem] @go(Env,[]KafkaSpecKafkaTemplateInitContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecKafkaTemplateInitContainerSecurityContext @go(SecurityContext,*KafkaSpecKafkaTemplateInitContainerSecurityContext)
}

#KafkaSpecKafkaTemplateInitContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// Security context for the container.
#KafkaSpecKafkaTemplateInitContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecKafkaTemplateInitContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecKafkaTemplateInitContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecKafkaTemplateInitContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecKafkaTemplateInitContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecKafkaTemplateInitContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecKafkaTemplateInitContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecKafkaTemplateInitContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecKafkaTemplateInitContainerSecurityContextWindowsOptions)
}

#KafkaSpecKafkaTemplateInitContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecKafkaTemplateInitContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecKafkaTemplateInitContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecKafkaTemplateInitContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for Secret of the Kafka Cluster JMX authentication.
#KafkaSpecKafkaTemplateJmxSecret: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateJmxSecretMetadata @go(Metadata,*KafkaSpecKafkaTemplateJmxSecretMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateJmxSecretMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateJmxSecretMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateJmxSecretMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateJmxSecretMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateJmxSecretMetadataLabels: {[string]: string}

// Template for the Kafka broker container.
#KafkaSpecKafkaTemplateKafkaContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecKafkaTemplateKafkaContainerEnvElem] @go(Env,[]KafkaSpecKafkaTemplateKafkaContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecKafkaTemplateKafkaContainerSecurityContext @go(SecurityContext,*KafkaSpecKafkaTemplateKafkaContainerSecurityContext)
}

#KafkaSpecKafkaTemplateKafkaContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// Security context for the container.
#KafkaSpecKafkaTemplateKafkaContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecKafkaTemplateKafkaContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecKafkaTemplateKafkaContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecKafkaTemplateKafkaContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecKafkaTemplateKafkaContainerSecurityContextWindowsOptions)
}

#KafkaSpecKafkaTemplateKafkaContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecKafkaTemplateKafkaContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecKafkaTemplateKafkaContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for Kafka per-pod `Ingress` used for access from outside of Kubernetes.
#KafkaSpecKafkaTemplatePerPodIngress: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplatePerPodIngressMetadata @go(Metadata,*KafkaSpecKafkaTemplatePerPodIngressMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplatePerPodIngressMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplatePerPodIngressMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplatePerPodIngressMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePerPodIngressMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePerPodIngressMetadataLabels: {[string]: string}

// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
#KafkaSpecKafkaTemplatePerPodRoute: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplatePerPodRouteMetadata @go(Metadata,*KafkaSpecKafkaTemplatePerPodRouteMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplatePerPodRouteMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplatePerPodRouteMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplatePerPodRouteMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePerPodRouteMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePerPodRouteMetadataLabels: {[string]: string}

// Template for Kafka per-pod `Services` used for access from outside of
// Kubernetes.
#KafkaSpecKafkaTemplatePerPodService: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplatePerPodServiceMetadata @go(Metadata,*KafkaSpecKafkaTemplatePerPodServiceMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplatePerPodServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplatePerPodServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplatePerPodServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePerPodServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePerPodServiceMetadataLabels: {[string]: string}

// Template for all Kafka `PersistentVolumeClaims`.
#KafkaSpecKafkaTemplatePersistentVolumeClaim: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplatePersistentVolumeClaimMetadata @go(Metadata,*KafkaSpecKafkaTemplatePersistentVolumeClaimMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplatePersistentVolumeClaimMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplatePersistentVolumeClaimMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplatePersistentVolumeClaimMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePersistentVolumeClaimMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePersistentVolumeClaimMetadataLabels: {[string]: string}

// Template for Kafka `Pods`.
#KafkaSpecKafkaTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaSpecKafkaTemplatePodAffinity @go(Affinity,*KafkaSpecKafkaTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaSpecKafkaTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaSpecKafkaTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaSpecKafkaTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaSpecKafkaTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplatePodMetadata @go(Metadata,*KafkaSpecKafkaTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaSpecKafkaTemplatePodSecurityContext @go(SecurityContext,*KafkaSpecKafkaTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaSpecKafkaTemplatePodTolerationsElem] @go(Tolerations,[]KafkaSpecKafkaTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElem)
}

// The pod's affinity rules.
#KafkaSpecKafkaTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaSpecKafkaTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaSpecKafkaTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaSpecKafkaTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaSpecKafkaTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinity)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

// Template for Kafka `PodDisruptionBudget`.
#KafkaSpecKafkaTemplatePodDisruptionBudget: {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	maxUnavailable?: null | int32 @go(MaxUnavailable,*int32)

	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	metadata?: null | #KafkaSpecKafkaTemplatePodDisruptionBudgetMetadata @go(Metadata,*KafkaSpecKafkaTemplatePodDisruptionBudgetMetadata)
}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
#KafkaSpecKafkaTemplatePodDisruptionBudgetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplatePodDisruptionBudgetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplatePodDisruptionBudgetMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePodDisruptionBudgetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePodDisruptionBudgetMetadataLabels: {[string]: string}

#KafkaSpecKafkaTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaSpecKafkaTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplatePodMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePodMetadataLabels: {[string]: string}

// Configures pod-level security attributes and common container settings.
#KafkaSpecKafkaTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecKafkaTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecKafkaTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecKafkaTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecKafkaTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaSpecKafkaTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaSpecKafkaTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecKafkaTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecKafkaTemplatePodSecurityContextWindowsOptions)
}

#KafkaSpecKafkaTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecKafkaTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecKafkaTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecKafkaTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for Kafka `StrimziPodSet` resource.
#KafkaSpecKafkaTemplatePodSet: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplatePodSetMetadata @go(Metadata,*KafkaSpecKafkaTemplatePodSetMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplatePodSetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplatePodSetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplatePodSetMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePodSetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplatePodSetMetadataLabels: {[string]: string}

#KafkaSpecKafkaTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

#KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecKafkaTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

// Template for the Kafka service account.
#KafkaSpecKafkaTemplateServiceAccount: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateServiceAccountMetadata @go(Metadata,*KafkaSpecKafkaTemplateServiceAccountMetadata)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateServiceAccountMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateServiceAccountMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateServiceAccountMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateServiceAccountMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateServiceAccountMetadataLabels: {[string]: string}

// Template for Kafka `StatefulSet`.
#KafkaSpecKafkaTemplateStatefulset: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecKafkaTemplateStatefulsetMetadata @go(Metadata,*KafkaSpecKafkaTemplateStatefulsetMetadata)

	// PodManagementPolicy which will be used for this StatefulSet. Valid values are
	// `Parallel` and `OrderedReady`. Defaults to `Parallel`.
	podManagementPolicy?: null | #KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy @go(PodManagementPolicy,*KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy)
}

// Metadata applied to the resource.
#KafkaSpecKafkaTemplateStatefulsetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecKafkaTemplateStatefulsetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecKafkaTemplateStatefulsetMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecKafkaTemplateStatefulsetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecKafkaTemplateStatefulsetMetadataLabels: {[string]: string}

#KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy: _ // #enumKafkaSpecKafkaTemplateStatefulsetPodManagementPolicy

#enumKafkaSpecKafkaTemplateStatefulsetPodManagementPolicy:
	#KafkaSpecKafkaTemplateStatefulsetPodManagementPolicyOrderedReady |
	#KafkaSpecKafkaTemplateStatefulsetPodManagementPolicyParallel

#KafkaSpecKafkaTemplateStatefulsetPodManagementPolicyOrderedReady: #KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy & "OrderedReady"

#KafkaSpecKafkaTemplateStatefulsetPodManagementPolicyParallel: #KafkaSpecKafkaTemplateStatefulsetPodManagementPolicy & "Parallel"

// Configure the tiered storage feature for Kafka brokers.
#KafkaSpecKafkaTieredStorage: _

// Configuration for the Remote Storage Manager.
#KafkaSpecKafkaTieredStorageRemoteStorageManager: {
	// The class name for the `RemoteStorageManager` implementation.
	className?: null | string @go(ClassName,*string)

	// The class path for the `RemoteStorageManager` implementation.
	classPath?: null | string @go(ClassPath,*string)

	// The additional configuration map for the `RemoteStorageManager` implementation.
	// Keys will be automatically prefixed with `rsm.config.`, and added to Kafka
	// broker configuration.
	config?: #KafkaSpecKafkaTieredStorageRemoteStorageManagerConfig @go(Config)
}

// The additional configuration map for the `RemoteStorageManager` implementation.
// Keys will be automatically prefixed with `rsm.config.`, and added to Kafka
// broker configuration.
#KafkaSpecKafkaTieredStorageRemoteStorageManagerConfig: {[string]: string}

#KafkaSpecKafkaTieredStorageType: _ // #enumKafkaSpecKafkaTieredStorageType

#enumKafkaSpecKafkaTieredStorageType:
	#KafkaSpecKafkaTieredStorageTypeCustom

#KafkaSpecKafkaTieredStorageTypeCustom: #KafkaSpecKafkaTieredStorageType & "custom"

// Configuration of the ZooKeeper cluster. This section is required when running a
// ZooKeeper-based Apache Kafka cluster.
#KafkaSpecZookeeper: _

// JMX Options for Zookeeper nodes.
#KafkaSpecZookeeperJmxOptions: {
	// Authentication configuration for connecting to the JMX port.
	authentication?: null | #KafkaSpecZookeeperJmxOptionsAuthentication @go(Authentication,*KafkaSpecZookeeperJmxOptionsAuthentication)
}

// Authentication configuration for connecting to the JMX port.
#KafkaSpecZookeeperJmxOptionsAuthentication: _

#KafkaSpecZookeeperJmxOptionsAuthenticationType: _ // #enumKafkaSpecZookeeperJmxOptionsAuthenticationType

#enumKafkaSpecZookeeperJmxOptionsAuthenticationType:
	#KafkaSpecZookeeperJmxOptionsAuthenticationTypePassword

#KafkaSpecZookeeperJmxOptionsAuthenticationTypePassword: #KafkaSpecZookeeperJmxOptionsAuthenticationType & "password"

// JVM Options for pods.
#KafkaSpecZookeeperJvmOptions: {
	// A map of -XX options to the JVM.
	"-XX"?: #KafkaSpecZookeeperJvmOptionsXX @go(XX)

	// -Xms option to to the JVM.
	"-Xms"?: null | string @go(Xms,*string)

	// -Xmx option to to the JVM.
	"-Xmx"?: null | string @go(Xmx,*string)

	// Specifies whether the Garbage Collection logging is enabled. The default is
	// false.
	gcLoggingEnabled?: null | bool @go(GcLoggingEnabled,*bool)

	// A map of additional system properties which will be passed using the `-D`
	// option to the JVM.
	javaSystemProperties?: [...#KafkaSpecZookeeperJvmOptionsJavaSystemPropertiesElem] @go(JavaSystemProperties,[]KafkaSpecZookeeperJvmOptionsJavaSystemPropertiesElem)
}

#KafkaSpecZookeeperJvmOptionsJavaSystemPropertiesElem: {
	// The system property name.
	name?: null | string @go(Name,*string)

	// The system property value.
	value?: null | string @go(Value,*string)
}

// A map of -XX options to the JVM.
#KafkaSpecZookeeperJvmOptionsXX: {[string]: string}

// Pod liveness checking.
#KafkaSpecZookeeperLivenessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// Logging configuration for ZooKeeper.
#KafkaSpecZookeeperLogging: _

// A Map from logger name to logger level.
#KafkaSpecZookeeperLoggingLoggers: {[string]: string}

#KafkaSpecZookeeperLoggingType: _ // #enumKafkaSpecZookeeperLoggingType

#enumKafkaSpecZookeeperLoggingType:
	#KafkaSpecZookeeperLoggingTypeExternal |
	#KafkaSpecZookeeperLoggingTypeInline

#KafkaSpecZookeeperLoggingTypeExternal: #KafkaSpecZookeeperLoggingType & "external"

#KafkaSpecZookeeperLoggingTypeInline: #KafkaSpecZookeeperLoggingType & "inline"

// `ConfigMap` entry where the logging configuration is stored.
#KafkaSpecZookeeperLoggingValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaSpecZookeeperLoggingValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaSpecZookeeperLoggingValueFromConfigMapKeyRef)
}

// Reference to the key in the ConfigMap containing the configuration.
#KafkaSpecZookeeperLoggingValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// Metrics configuration.
#KafkaSpecZookeeperMetricsConfig: _

#KafkaSpecZookeeperMetricsConfigType: _ // #enumKafkaSpecZookeeperMetricsConfigType

#enumKafkaSpecZookeeperMetricsConfigType:
	#KafkaSpecZookeeperMetricsConfigTypeJmxPrometheusExporter

#KafkaSpecZookeeperMetricsConfigTypeJmxPrometheusExporter: #KafkaSpecZookeeperMetricsConfigType & "jmxPrometheusExporter"

// ConfigMap entry where the Prometheus JMX Exporter configuration is stored.
#KafkaSpecZookeeperMetricsConfigValueFrom: {
	// Reference to the key in the ConfigMap containing the configuration.
	configMapKeyRef?: null | #KafkaSpecZookeeperMetricsConfigValueFromConfigMapKeyRef @go(ConfigMapKeyRef,*KafkaSpecZookeeperMetricsConfigValueFromConfigMapKeyRef)
}

// Reference to the key in the ConfigMap containing the configuration.
#KafkaSpecZookeeperMetricsConfigValueFromConfigMapKeyRef: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Optional corresponds to the JSON schema field "optional".
	optional?: null | bool @go(Optional,*bool)
}

// Pod readiness checking.
#KafkaSpecZookeeperReadinessProbe: {
	// Minimum consecutive failures for the probe to be considered failed after having
	// succeeded. Defaults to 3. Minimum value is 1.
	failureThreshold?: null | int32 @go(FailureThreshold,*int32)

	// The initial delay before first the health is first checked. Default to 15
	// seconds. Minimum value is 0.
	initialDelaySeconds?: null | int32 @go(InitialDelaySeconds,*int32)

	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
	// value is 1.
	periodSeconds?: null | int32 @go(PeriodSeconds,*int32)

	// Minimum consecutive successes for the probe to be considered successful after
	// having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	successThreshold?: null | int32 @go(SuccessThreshold,*int32)

	// The timeout for each attempted health check. Default to 5 seconds. Minimum
	// value is 1.
	timeoutSeconds?: null | int32 @go(TimeoutSeconds,*int32)
}

// CPU and memory resources to reserve.
#KafkaSpecZookeeperResources: {
	// Claims corresponds to the JSON schema field "claims".
	claims?: [...#KafkaSpecZookeeperResourcesClaimsElem] @go(Claims,[]KafkaSpecZookeeperResourcesClaimsElem)

	// Limits corresponds to the JSON schema field "limits".
	limits?: null | apiextensions.#JSON @go(Limits,*apiextensions.JSON)

	// Requests corresponds to the JSON schema field "requests".
	requests?: null | apiextensions.#JSON @go(Requests,*apiextensions.JSON)
}

#KafkaSpecZookeeperResourcesClaimsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Storage configuration (disk). Cannot be updated.
#KafkaSpecZookeeperStorage: _

#KafkaSpecZookeeperStorageOverridesElem: {
	// Id of the kafka broker (broker identifier).
	broker?: null | int32 @go(Broker,*int32)

	// The storage class to use for dynamic volume allocation for this broker.
	class?: null | string @go(Class,*string)
}

// Specifies a specific persistent volume to use. It contains key:value pairs
// representing labels for selecting such a volume.
#KafkaSpecZookeeperStorageSelector: {[string]: string}

#KafkaSpecZookeeperStorageType: _ // #enumKafkaSpecZookeeperStorageType

#enumKafkaSpecZookeeperStorageType:
	#KafkaSpecZookeeperStorageTypeEphemeral |
	#KafkaSpecZookeeperStorageTypePersistentClaim

#KafkaSpecZookeeperStorageTypeEphemeral: #KafkaSpecZookeeperStorageType & "ephemeral"

#KafkaSpecZookeeperStorageTypePersistentClaim: #KafkaSpecZookeeperStorageType & "persistent-claim"

// Template for ZooKeeper cluster resources. The template allows users to specify
// how the Kubernetes resources are generated.
#KafkaSpecZookeeperTemplate: {
	// Template for ZooKeeper client `Service`.
	clientService?: null | #KafkaSpecZookeeperTemplateClientService @go(ClientService,*KafkaSpecZookeeperTemplateClientService)

	// Template for Secret of the Zookeeper Cluster JMX authentication.
	jmxSecret?: null | #KafkaSpecZookeeperTemplateJmxSecret @go(JmxSecret,*KafkaSpecZookeeperTemplateJmxSecret)

	// Template for ZooKeeper nodes `Service`.
	nodesService?: null | #KafkaSpecZookeeperTemplateNodesService @go(NodesService,*KafkaSpecZookeeperTemplateNodesService)

	// Template for all ZooKeeper `PersistentVolumeClaims`.
	persistentVolumeClaim?: null | #KafkaSpecZookeeperTemplatePersistentVolumeClaim @go(PersistentVolumeClaim,*KafkaSpecZookeeperTemplatePersistentVolumeClaim)

	// Template for ZooKeeper `Pods`.
	pod?: null | #KafkaSpecZookeeperTemplatePod @go(Pod,*KafkaSpecZookeeperTemplatePod)

	// Template for ZooKeeper `PodDisruptionBudget`.
	podDisruptionBudget?: null | #KafkaSpecZookeeperTemplatePodDisruptionBudget @go(PodDisruptionBudget,*KafkaSpecZookeeperTemplatePodDisruptionBudget)

	// Template for ZooKeeper `StrimziPodSet` resource.
	podSet?: null | #KafkaSpecZookeeperTemplatePodSet @go(PodSet,*KafkaSpecZookeeperTemplatePodSet)

	// Template for the ZooKeeper service account.
	serviceAccount?: null | #KafkaSpecZookeeperTemplateServiceAccount @go(ServiceAccount,*KafkaSpecZookeeperTemplateServiceAccount)

	// Template for ZooKeeper `StatefulSet`.
	statefulset?: null | #KafkaSpecZookeeperTemplateStatefulset @go(Statefulset,*KafkaSpecZookeeperTemplateStatefulset)

	// Template for the ZooKeeper container.
	zookeeperContainer?: null | #KafkaSpecZookeeperTemplateZookeeperContainer @go(ZookeeperContainer,*KafkaSpecZookeeperTemplateZookeeperContainer)
}

// Template for ZooKeeper client `Service`.
#KafkaSpecZookeeperTemplateClientService: {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	ipFamilies?: [...#KafkaSpecZookeeperTemplateClientServiceIpFamiliesElem] @go(IpFamilies,[]KafkaSpecZookeeperTemplateClientServiceIpFamiliesElem)

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	ipFamilyPolicy?: null | #KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy @go(IpFamilyPolicy,*KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecZookeeperTemplateClientServiceMetadata @go(Metadata,*KafkaSpecZookeeperTemplateClientServiceMetadata)
}

#KafkaSpecZookeeperTemplateClientServiceIpFamiliesElem: _ // #enumKafkaSpecZookeeperTemplateClientServiceIpFamiliesElem

#enumKafkaSpecZookeeperTemplateClientServiceIpFamiliesElem:
	#KafkaSpecZookeeperTemplateClientServiceIpFamiliesElemIPv4 |
	#KafkaSpecZookeeperTemplateClientServiceIpFamiliesElemIPv6

#KafkaSpecZookeeperTemplateClientServiceIpFamiliesElemIPv4: #KafkaSpecZookeeperTemplateClientServiceIpFamiliesElem & "IPv4"

#KafkaSpecZookeeperTemplateClientServiceIpFamiliesElemIPv6: #KafkaSpecZookeeperTemplateClientServiceIpFamiliesElem & "IPv6"

#KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy: _ // #enumKafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy

#enumKafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy:
	#KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicyPreferDualStack |
	#KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicyRequireDualStack |
	#KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicySingleStack

#KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicyPreferDualStack: #KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy & "PreferDualStack"

#KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicyRequireDualStack: #KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy & "RequireDualStack"

#KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicySingleStack: #KafkaSpecZookeeperTemplateClientServiceIpFamilyPolicy & "SingleStack"

// Metadata applied to the resource.
#KafkaSpecZookeeperTemplateClientServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplateClientServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplateClientServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateClientServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateClientServiceMetadataLabels: {[string]: string}

// Template for Secret of the Zookeeper Cluster JMX authentication.
#KafkaSpecZookeeperTemplateJmxSecret: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecZookeeperTemplateJmxSecretMetadata @go(Metadata,*KafkaSpecZookeeperTemplateJmxSecretMetadata)
}

// Metadata applied to the resource.
#KafkaSpecZookeeperTemplateJmxSecretMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplateJmxSecretMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplateJmxSecretMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateJmxSecretMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateJmxSecretMetadataLabels: {[string]: string}

// Template for ZooKeeper nodes `Service`.
#KafkaSpecZookeeperTemplateNodesService: {
	// Specifies the IP Families used by the service. Available options are `IPv4` and
	// `IPv6`. If unspecified, Kubernetes will choose the default value based on the
	// `ipFamilyPolicy` setting.
	ipFamilies?: [...#KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElem] @go(IpFamilies,[]KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElem)

	// Specifies the IP Family Policy used by the service. Available options are
	// `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a
	// single IP family. `PreferDualStack` is for two IP families on dual-stack
	// configured clusters or a single IP family on single-stack clusters.
	// `RequireDualStack` fails unless there are two IP families on dual-stack
	// configured clusters. If unspecified, Kubernetes will choose the default value
	// based on the service type.
	ipFamilyPolicy?: null | #KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy @go(IpFamilyPolicy,*KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecZookeeperTemplateNodesServiceMetadata @go(Metadata,*KafkaSpecZookeeperTemplateNodesServiceMetadata)
}

#KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElem: _ // #enumKafkaSpecZookeeperTemplateNodesServiceIpFamiliesElem

#enumKafkaSpecZookeeperTemplateNodesServiceIpFamiliesElem:
	#KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElemIPv4 |
	#KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElemIPv6

#KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElemIPv4: #KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElem & "IPv4"

#KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElemIPv6: #KafkaSpecZookeeperTemplateNodesServiceIpFamiliesElem & "IPv6"

#KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy: _ // #enumKafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy

#enumKafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy:
	#KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicyPreferDualStack |
	#KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicyRequireDualStack |
	#KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicySingleStack

#KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicyPreferDualStack: #KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy & "PreferDualStack"

#KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicyRequireDualStack: #KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy & "RequireDualStack"

#KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicySingleStack: #KafkaSpecZookeeperTemplateNodesServiceIpFamilyPolicy & "SingleStack"

// Metadata applied to the resource.
#KafkaSpecZookeeperTemplateNodesServiceMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplateNodesServiceMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplateNodesServiceMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateNodesServiceMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateNodesServiceMetadataLabels: {[string]: string}

// Template for all ZooKeeper `PersistentVolumeClaims`.
#KafkaSpecZookeeperTemplatePersistentVolumeClaim: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadata @go(Metadata,*KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadata)
}

// Metadata applied to the resource.
#KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplatePersistentVolumeClaimMetadataLabels: {[string]: string}

// Template for ZooKeeper `Pods`.
#KafkaSpecZookeeperTemplatePod: {
	// The pod's affinity rules.
	affinity?: null | #KafkaSpecZookeeperTemplatePodAffinity @go(Affinity,*KafkaSpecZookeeperTemplatePodAffinity)

	// Indicates whether information about services should be injected into Pod's
	// environment variables.
	enableServiceLinks?: null | bool @go(EnableServiceLinks,*bool)

	// The pod's HostAliases. HostAliases is an optional list of hosts and IPs that
	// will be injected into the Pod's hosts file if specified.
	hostAliases?: [...#KafkaSpecZookeeperTemplatePodHostAliasesElem] @go(HostAliases,[]KafkaSpecZookeeperTemplatePodHostAliasesElem)

	// List of references to secrets in the same namespace to use for pulling any of
	// the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment
	// variable in Cluster Operator and the `imagePullSecrets` option are specified,
	// only the `imagePullSecrets` variable is used and the
	// `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
	imagePullSecrets?: [...#KafkaSpecZookeeperTemplatePodImagePullSecretsElem] @go(ImagePullSecrets,[]KafkaSpecZookeeperTemplatePodImagePullSecretsElem)

	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecZookeeperTemplatePodMetadata @go(Metadata,*KafkaSpecZookeeperTemplatePodMetadata)

	// The name of the priority class used to assign priority to the pods.
	priorityClassName?: null | string @go(PriorityClassName,*string)

	// The name of the scheduler used to dispatch this `Pod`. If not specified, the
	// default scheduler will be used.
	schedulerName?: null | string @go(SchedulerName,*string)

	// Configures pod-level security attributes and common container settings.
	securityContext?: null | #KafkaSpecZookeeperTemplatePodSecurityContext @go(SecurityContext,*KafkaSpecZookeeperTemplatePodSecurityContext)

	// The grace period is the duration in seconds after the processes running in the
	// pod are sent a termination signal, and the time when the processes are forcibly
	// halted with a kill signal. Set this value to longer than the expected cleanup
	// time for your process. Value must be a non-negative integer. A zero value
	// indicates delete immediately. You might need to increase the grace period for
	// very large Kafka clusters, so that the Kafka brokers have enough time to
	// transfer their work to another broker before they are terminated. Defaults to
	// 30 seconds.
	terminationGracePeriodSeconds?: null | int32 @go(TerminationGracePeriodSeconds,*int32)

	// Defines the total amount (for example `1Gi`) of local storage required for
	// temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
	tmpDirSizeLimit?: null | string @go(TmpDirSizeLimit,*string)

	// The pod's tolerations.
	tolerations?: [...#KafkaSpecZookeeperTemplatePodTolerationsElem] @go(Tolerations,[]KafkaSpecZookeeperTemplatePodTolerationsElem)

	// The pod's topology spread constraints.
	topologySpreadConstraints?: [...#KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElem] @go(TopologySpreadConstraints,[]KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElem)
}

// The pod's affinity rules.
#KafkaSpecZookeeperTemplatePodAffinity: {
	// NodeAffinity corresponds to the JSON schema field "nodeAffinity".
	nodeAffinity?: null | #KafkaSpecZookeeperTemplatePodAffinityNodeAffinity @go(NodeAffinity,*KafkaSpecZookeeperTemplatePodAffinityNodeAffinity)

	// PodAffinity corresponds to the JSON schema field "podAffinity".
	podAffinity?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAffinity @go(PodAffinity,*KafkaSpecZookeeperTemplatePodAffinityPodAffinity)

	// PodAntiAffinity corresponds to the JSON schema field "podAntiAffinity".
	podAntiAffinity?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinity @go(PodAntiAffinity,*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinity)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: null | #KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution @go(RequiredDuringSchedulingIgnoredDuringExecution,*KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// Preference corresponds to the JSON schema field "preference".
	preference?: null | #KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference @go(Preference,*KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreference: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem] @go(MatchFields,[]KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPreferenceMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution: {
	// NodeSelectorTerms corresponds to the JSON schema field "nodeSelectorTerms".
	nodeSelectorTerms?: [...#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem] @go(NodeSelectorTerms,[]KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElem: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem)

	// MatchFields corresponds to the JSON schema field "matchFields".
	matchFields?: [...#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem] @go(MatchFields,[]KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsElemMatchFieldsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinity: {
	// PreferredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "preferredDuringSchedulingIgnoredDuringExecution".
	preferredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem] @go(PreferredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem)

	// RequiredDuringSchedulingIgnoredDuringExecution corresponds to the JSON schema
	// field "requiredDuringSchedulingIgnoredDuringExecution".
	requiredDuringSchedulingIgnoredDuringExecution?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem] @go(RequiredDuringSchedulingIgnoredDuringExecution,[]KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElem: {
	// PodAffinityTerm corresponds to the JSON schema field "podAffinityTerm".
	podAffinityTerm?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm @go(PodAffinityTerm,*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm)

	// Weight corresponds to the JSON schema field "weight".
	weight?: null | int32 @go(Weight,*int32)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTerm: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector @go(LabelSelector,*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector @go(NamespaceSelector,*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermLabelSelectorMatchLabels: [string]: string

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionElemPodAffinityTermNamespaceSelectorMatchLabels: [string]: string

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector @go(LabelSelector,*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MismatchLabelKeys corresponds to the JSON schema field "mismatchLabelKeys".
	mismatchLabelKeys?: [...string] @go(MismatchLabelKeys,[]string)

	// NamespaceSelector corresponds to the JSON schema field "namespaceSelector".
	namespaceSelector?: null | #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector @go(NamespaceSelector,*KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector)

	// Namespaces corresponds to the JSON schema field "namespaces".
	namespaces?: [...string] @go(Namespaces,[]string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemLabelSelectorMatchLabels: [string]: string

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionElemNamespaceSelectorMatchLabels: [string]: string

// Template for ZooKeeper `PodDisruptionBudget`.
#KafkaSpecZookeeperTemplatePodDisruptionBudget: {
	// Maximum number of unavailable pods to allow automatic Pod eviction. A Pod
	// eviction is allowed when the `maxUnavailable` number of pods or fewer are
	// unavailable after the eviction. Setting this value to 0 prevents all voluntary
	// evictions, so the pods must be evicted manually. Defaults to 1.
	maxUnavailable?: null | int32 @go(MaxUnavailable,*int32)

	// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
	metadata?: null | #KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadata @go(Metadata,*KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadata)
}

// Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
#KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplatePodDisruptionBudgetMetadataLabels: {[string]: string}

#KafkaSpecZookeeperTemplatePodHostAliasesElem: {
	// Hostnames corresponds to the JSON schema field "hostnames".
	hostnames?: [...string] @go(Hostnames,[]string)

	// Ip corresponds to the JSON schema field "ip".
	ip?: null | string @go(Ip,*string)
}

#KafkaSpecZookeeperTemplatePodImagePullSecretsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)
}

// Metadata applied to the resource.
#KafkaSpecZookeeperTemplatePodMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplatePodMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplatePodMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplatePodMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplatePodMetadataLabels: {[string]: string}

// Configures pod-level security attributes and common container settings.
#KafkaSpecZookeeperTemplatePodSecurityContext: {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	fsGroup?: null | int32 @go(FsGroup,*int32)

	// FsGroupChangePolicy corresponds to the JSON schema field "fsGroupChangePolicy".
	fsGroupChangePolicy?: null | string @go(FsGroupChangePolicy,*string)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecZookeeperTemplatePodSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecZookeeperTemplatePodSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecZookeeperTemplatePodSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecZookeeperTemplatePodSecurityContextSeccompProfile)

	// SupplementalGroups corresponds to the JSON schema field "supplementalGroups".
	supplementalGroups?: [...int32] @go(SupplementalGroups,[]int32)

	// Sysctls corresponds to the JSON schema field "sysctls".
	sysctls?: [...#KafkaSpecZookeeperTemplatePodSecurityContextSysctlsElem] @go(Sysctls,[]KafkaSpecZookeeperTemplatePodSecurityContextSysctlsElem)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecZookeeperTemplatePodSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecZookeeperTemplatePodSecurityContextWindowsOptions)
}

#KafkaSpecZookeeperTemplatePodSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecZookeeperTemplatePodSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecZookeeperTemplatePodSecurityContextSysctlsElem: {
	// Name corresponds to the JSON schema field "name".
	name?: null | string @go(Name,*string)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecZookeeperTemplatePodSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// Template for ZooKeeper `StrimziPodSet` resource.
#KafkaSpecZookeeperTemplatePodSet: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecZookeeperTemplatePodSetMetadata @go(Metadata,*KafkaSpecZookeeperTemplatePodSetMetadata)
}

// Metadata applied to the resource.
#KafkaSpecZookeeperTemplatePodSetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplatePodSetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplatePodSetMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplatePodSetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplatePodSetMetadataLabels: {[string]: string}

#KafkaSpecZookeeperTemplatePodTolerationsElem: {
	// Effect corresponds to the JSON schema field "effect".
	effect?: null | string @go(Effect,*string)

	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// TolerationSeconds corresponds to the JSON schema field "tolerationSeconds".
	tolerationSeconds?: null | int32 @go(TolerationSeconds,*int32)

	// Value corresponds to the JSON schema field "value".
	value?: null | string @go(Value,*string)
}

#KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElem: {
	// LabelSelector corresponds to the JSON schema field "labelSelector".
	labelSelector?: null | #KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelector @go(LabelSelector,*KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelector)

	// MatchLabelKeys corresponds to the JSON schema field "matchLabelKeys".
	matchLabelKeys?: [...string] @go(MatchLabelKeys,[]string)

	// MaxSkew corresponds to the JSON schema field "maxSkew".
	maxSkew?: null | int32 @go(MaxSkew,*int32)

	// MinDomains corresponds to the JSON schema field "minDomains".
	minDomains?: null | int32 @go(MinDomains,*int32)

	// NodeAffinityPolicy corresponds to the JSON schema field "nodeAffinityPolicy".
	nodeAffinityPolicy?: null | string @go(NodeAffinityPolicy,*string)

	// NodeTaintsPolicy corresponds to the JSON schema field "nodeTaintsPolicy".
	nodeTaintsPolicy?: null | string @go(NodeTaintsPolicy,*string)

	// TopologyKey corresponds to the JSON schema field "topologyKey".
	topologyKey?: null | string @go(TopologyKey,*string)

	// WhenUnsatisfiable corresponds to the JSON schema field "whenUnsatisfiable".
	whenUnsatisfiable?: null | string @go(WhenUnsatisfiable,*string)
}

#KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelector: {
	// MatchExpressions corresponds to the JSON schema field "matchExpressions".
	matchExpressions?: [...#KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem] @go(MatchExpressions,[]KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem)

	// MatchLabels corresponds to the JSON schema field "matchLabels".
	matchLabels?: #KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels @go(MatchLabels)
}

#KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchExpressionsElem: {
	// Key corresponds to the JSON schema field "key".
	key?: null | string @go(Key,*string)

	// Operator corresponds to the JSON schema field "operator".
	operator?: null | string @go(Operator,*string)

	// Values corresponds to the JSON schema field "values".
	values?: [...string] @go(Values,[]string)
}

#KafkaSpecZookeeperTemplatePodTopologySpreadConstraintsElemLabelSelectorMatchLabels: [string]: string

// Template for the ZooKeeper service account.
#KafkaSpecZookeeperTemplateServiceAccount: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecZookeeperTemplateServiceAccountMetadata @go(Metadata,*KafkaSpecZookeeperTemplateServiceAccountMetadata)
}

// Metadata applied to the resource.
#KafkaSpecZookeeperTemplateServiceAccountMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplateServiceAccountMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplateServiceAccountMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateServiceAccountMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateServiceAccountMetadataLabels: {[string]: string}

// Template for ZooKeeper `StatefulSet`.
#KafkaSpecZookeeperTemplateStatefulset: {
	// Metadata applied to the resource.
	metadata?: null | #KafkaSpecZookeeperTemplateStatefulsetMetadata @go(Metadata,*KafkaSpecZookeeperTemplateStatefulsetMetadata)

	// PodManagementPolicy which will be used for this StatefulSet. Valid values are
	// `Parallel` and `OrderedReady`. Defaults to `Parallel`.
	podManagementPolicy?: null | #KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy @go(PodManagementPolicy,*KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy)
}

// Metadata applied to the resource.
#KafkaSpecZookeeperTemplateStatefulsetMetadata: {
	// Annotations added to the Kubernetes resource.
	annotations?: #KafkaSpecZookeeperTemplateStatefulsetMetadataAnnotations @go(Annotations)

	// Labels added to the Kubernetes resource.
	labels?: #KafkaSpecZookeeperTemplateStatefulsetMetadataLabels @go(Labels)
}

// Annotations added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateStatefulsetMetadataAnnotations: {[string]: string}

// Labels added to the Kubernetes resource.
#KafkaSpecZookeeperTemplateStatefulsetMetadataLabels: {[string]: string}

#KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy: _ // #enumKafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy

#enumKafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy:
	#KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicyOrderedReady |
	#KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicyParallel

#KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicyOrderedReady: #KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy & "OrderedReady"

#KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicyParallel: #KafkaSpecZookeeperTemplateStatefulsetPodManagementPolicy & "Parallel"

// Template for the ZooKeeper container.
#KafkaSpecZookeeperTemplateZookeeperContainer: {
	// Environment variables which should be applied to the container.
	env?: [...#KafkaSpecZookeeperTemplateZookeeperContainerEnvElem] @go(Env,[]KafkaSpecZookeeperTemplateZookeeperContainerEnvElem)

	// Security context for the container.
	securityContext?: null | #KafkaSpecZookeeperTemplateZookeeperContainerSecurityContext @go(SecurityContext,*KafkaSpecZookeeperTemplateZookeeperContainerSecurityContext)
}

#KafkaSpecZookeeperTemplateZookeeperContainerEnvElem: {
	// The environment variable key.
	name?: null | string @go(Name,*string)

	// The environment variable value.
	value?: null | string @go(Value,*string)
}

// Security context for the container.
#KafkaSpecZookeeperTemplateZookeeperContainerSecurityContext: {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	allowPrivilegeEscalation?: null | bool @go(AllowPrivilegeEscalation,*bool)

	// Capabilities corresponds to the JSON schema field "capabilities".
	capabilities?: null | #KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextCapabilities @go(Capabilities,*KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextCapabilities)

	// Privileged corresponds to the JSON schema field "privileged".
	privileged?: null | bool @go(Privileged,*bool)

	// ProcMount corresponds to the JSON schema field "procMount".
	procMount?: null | string @go(ProcMount,*string)

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	readOnlyRootFilesystem?: null | bool @go(ReadOnlyRootFilesystem,*bool)

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	runAsGroup?: null | int32 @go(RunAsGroup,*int32)

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	runAsNonRoot?: null | bool @go(RunAsNonRoot,*bool)

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	runAsUser?: null | int32 @go(RunAsUser,*int32)

	// SeLinuxOptions corresponds to the JSON schema field "seLinuxOptions".
	seLinuxOptions?: null | #KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeLinuxOptions @go(SeLinuxOptions,*KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeLinuxOptions)

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	seccompProfile?: null | #KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeccompProfile @go(SeccompProfile,*KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeccompProfile)

	// WindowsOptions corresponds to the JSON schema field "windowsOptions".
	windowsOptions?: null | #KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextWindowsOptions @go(WindowsOptions,*KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextWindowsOptions)
}

#KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextCapabilities: {
	// Add corresponds to the JSON schema field "add".
	add?: [...string] @go(Add,[]string)

	// Drop corresponds to the JSON schema field "drop".
	drop?: [...string] @go(Drop,[]string)
}

#KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeLinuxOptions: {
	// Level corresponds to the JSON schema field "level".
	level?: null | string @go(Level,*string)

	// Role corresponds to the JSON schema field "role".
	role?: null | string @go(Role,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)

	// User corresponds to the JSON schema field "user".
	user?: null | string @go(User,*string)
}

#KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextSeccompProfile: {
	// LocalhostProfile corresponds to the JSON schema field "localhostProfile".
	localhostProfile?: null | string @go(LocalhostProfile,*string)

	// Type corresponds to the JSON schema field "type".
	type?: null | string @go(Type,*string)
}

#KafkaSpecZookeeperTemplateZookeeperContainerSecurityContextWindowsOptions: {
	// GmsaCredentialSpec corresponds to the JSON schema field "gmsaCredentialSpec".
	gmsaCredentialSpec?: null | string @go(GmsaCredentialSpec,*string)

	// GmsaCredentialSpecName corresponds to the JSON schema field
	// "gmsaCredentialSpecName".
	gmsaCredentialSpecName?: null | string @go(GmsaCredentialSpecName,*string)

	// HostProcess corresponds to the JSON schema field "hostProcess".
	hostProcess?: null | bool @go(HostProcess,*bool)

	// RunAsUserName corresponds to the JSON schema field "runAsUserName".
	runAsUserName?: null | string @go(RunAsUserName,*string)
}

// The status of the Kafka and ZooKeeper clusters, and Topic Operator.
#KafkaStatus: {
	// Kafka cluster Id.
	clusterId?: null | string @go(ClusterId,*string)

	// List of status conditions.
	conditions?: [...#KafkaStatusConditionsElem] @go(Conditions,[]KafkaStatusConditionsElem)

	// Defines where cluster metadata are stored. Possible values are: ZooKeeper if
	// the metadata are stored in ZooKeeper; KRaftMigration if the controllers are
	// connected to ZooKeeper, brokers are being rolled with Zookeeper migration
	// enabled and connection information to controllers, and the metadata migration
	// process is running; KRaftDualWriting if the metadata migration process finished
	// and the cluster is in dual-write mode; KRaftPostMigration if the brokers are
	// fully KRaft-based but controllers being rolled to disconnect from ZooKeeper;
	// PreKRaft if brokers and controller are fully KRaft-based, metadata are stored
	// in KRaft, but ZooKeeper must be deleted; KRaft if the metadata are stored in
	// KRaft.
	kafkaMetadataState?: null | #KafkaStatusKafkaMetadataState @go(KafkaMetadataState,*KafkaStatusKafkaMetadataState)

	// The KRaft metadata.version currently used by the Kafka cluster.
	kafkaMetadataVersion?: null | string @go(KafkaMetadataVersion,*string)

	// List of the KafkaNodePools used by this Kafka cluster.
	kafkaNodePools?: [...#KafkaStatusKafkaNodePoolsElem] @go(KafkaNodePools,[]KafkaStatusKafkaNodePoolsElem)

	// The version of Kafka currently deployed in the cluster.
	kafkaVersion?: null | string @go(KafkaVersion,*string)

	// Addresses of the internal and external listeners.
	listeners?: [...#KafkaStatusListenersElem] @go(Listeners,[]KafkaStatusListenersElem)

	// The generation of the CRD that was last reconciled by the operator.
	observedGeneration?: null | int32 @go(ObservedGeneration,*int32)

	// The version of the Strimzi Cluster Operator which performed the last successful
	// reconciliation.
	operatorLastSuccessfulVersion?: null | string @go(OperatorLastSuccessfulVersion,*string)
}

#KafkaStatusConditionsElem: {
	// Last time the condition of a type changed from one status to another. The
	// required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	lastTransitionTime?: null | string @go(LastTransitionTime,*string)

	// Human-readable message indicating details about the condition's last
	// transition.
	message?: null | string @go(Message,*string)

	// The reason for the condition's last transition (a single word in CamelCase).
	reason?: null | string @go(Reason,*string)

	// The status of the condition, either True, False or Unknown.
	status?: null | string @go(Status,*string)

	// The unique identifier of a condition, used to distinguish between other
	// conditions in the resource.
	type?: null | string @go(Type,*string)
}

#KafkaStatusKafkaMetadataState: _ // #enumKafkaStatusKafkaMetadataState

#enumKafkaStatusKafkaMetadataState:
	#KafkaStatusKafkaMetadataStateKRaft |
	#KafkaStatusKafkaMetadataStateKRaftDualWriting |
	#KafkaStatusKafkaMetadataStateKRaftMigration |
	#KafkaStatusKafkaMetadataStateKRaftPostMigration |
	#KafkaStatusKafkaMetadataStatePreKRaft |
	#KafkaStatusKafkaMetadataStateZooKeeper

#KafkaStatusKafkaMetadataStateKRaft: #KafkaStatusKafkaMetadataState & "KRaft"

#KafkaStatusKafkaMetadataStateKRaftDualWriting: #KafkaStatusKafkaMetadataState & "KRaftDualWriting"

#KafkaStatusKafkaMetadataStateKRaftMigration: #KafkaStatusKafkaMetadataState & "KRaftMigration"

#KafkaStatusKafkaMetadataStateKRaftPostMigration: #KafkaStatusKafkaMetadataState & "KRaftPostMigration"

#KafkaStatusKafkaMetadataStatePreKRaft: #KafkaStatusKafkaMetadataState & "PreKRaft"

#KafkaStatusKafkaMetadataStateZooKeeper: #KafkaStatusKafkaMetadataState & "ZooKeeper"

#KafkaStatusKafkaNodePoolsElem: {
	// The name of the KafkaNodePool used by this Kafka resource.
	name?: null | string @go(Name,*string)
}

#KafkaStatusListenersElem: {
	// A list of the addresses for this listener.
	addresses?: [...#KafkaStatusListenersElemAddressesElem] @go(Addresses,[]KafkaStatusListenersElemAddressesElem)

	// A comma-separated list of `host:port` pairs for connecting to the Kafka cluster
	// using this listener.
	bootstrapServers?: null | string @go(BootstrapServers,*string)

	// A list of TLS certificates which can be used to verify the identity of the
	// server when connecting to the given listener. Set only for `tls` and `external`
	// listeners.
	certificates?: [...string] @go(Certificates,[]string)

	// The name of the listener.
	name?: null | string @go(Name,*string)

	// The name of the listener.
	type?: null | string @go(Type,*string)
}

#KafkaStatusListenersElemAddressesElem: {
	// The DNS name or IP address of the Kafka bootstrap service.
	host?: null | string @go(Host,*string)

	// The port of the Kafka bootstrap service.
	port?: null | int32 @go(Port,*int32)
}
